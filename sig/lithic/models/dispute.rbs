module Lithic
  module Models
    type dispute =
      {
        token: String,
        amount: Integer,
        arbitration_date: Time?,
        created: Time,
        customer_filed_date: Time?,
        customer_note: String?,
        network_claim_ids: ::Array[String]?,
        network_filed_date: Time?,
        network_reason_code: String?,
        prearbitration_date: Time?,
        primary_claim_id: String?,
        reason: Lithic::Models::Dispute::reason,
        representment_date: Time?,
        resolution_amount: Integer?,
        resolution_date: Time?,
        resolution_note: String?,
        resolution_reason: Lithic::Models::Dispute::resolution_reason?,
        status: Lithic::Models::Dispute::status,
        transaction_token: String
      }

    class Dispute < Lithic::Internal::Type::BaseModel
      attr_accessor token: String

      attr_accessor amount: Integer

      attr_accessor arbitration_date: Time?

      attr_accessor created: Time

      attr_accessor customer_filed_date: Time?

      attr_accessor customer_note: String?

      attr_accessor network_claim_ids: ::Array[String]?

      attr_accessor network_filed_date: Time?

      attr_accessor network_reason_code: String?

      attr_accessor prearbitration_date: Time?

      attr_accessor primary_claim_id: String?

      attr_accessor reason: Lithic::Models::Dispute::reason

      attr_accessor representment_date: Time?

      attr_accessor resolution_amount: Integer?

      attr_accessor resolution_date: Time?

      attr_accessor resolution_note: String?

      attr_accessor resolution_reason: Lithic::Models::Dispute::resolution_reason?

      attr_accessor status: Lithic::Models::Dispute::status

      attr_accessor transaction_token: String

      def initialize: (
        token: String,
        amount: Integer,
        arbitration_date: Time?,
        created: Time,
        customer_filed_date: Time?,
        customer_note: String?,
        network_claim_ids: ::Array[String]?,
        network_filed_date: Time?,
        network_reason_code: String?,
        prearbitration_date: Time?,
        primary_claim_id: String?,
        reason: Lithic::Models::Dispute::reason,
        representment_date: Time?,
        resolution_amount: Integer?,
        resolution_date: Time?,
        resolution_note: String?,
        resolution_reason: Lithic::Models::Dispute::resolution_reason?,
        status: Lithic::Models::Dispute::status,
        transaction_token: String
      ) -> void

      def to_hash: -> Lithic::Models::dispute

      type reason =
        :ATM_CASH_MISDISPENSE
        | :CANCELLED
        | :DUPLICATED
        | :FRAUD_CARD_NOT_PRESENT
        | :FRAUD_CARD_PRESENT
        | :FRAUD_OTHER
        | :GOODS_SERVICES_NOT_AS_DESCRIBED
        | :GOODS_SERVICES_NOT_RECEIVED
        | :INCORRECT_AMOUNT
        | :MISSING_AUTH
        | :OTHER
        | :PROCESSING_ERROR
        | :RECURRING_TRANSACTION_NOT_CANCELLED
        | :REFUND_NOT_PROCESSED

      module Reason
        extend Lithic::Internal::Type::Enum

        ATM_CASH_MISDISPENSE: :ATM_CASH_MISDISPENSE
        CANCELLED: :CANCELLED
        DUPLICATED: :DUPLICATED
        FRAUD_CARD_NOT_PRESENT: :FRAUD_CARD_NOT_PRESENT
        FRAUD_CARD_PRESENT: :FRAUD_CARD_PRESENT
        FRAUD_OTHER: :FRAUD_OTHER
        GOODS_SERVICES_NOT_AS_DESCRIBED: :GOODS_SERVICES_NOT_AS_DESCRIBED
        GOODS_SERVICES_NOT_RECEIVED: :GOODS_SERVICES_NOT_RECEIVED
        INCORRECT_AMOUNT: :INCORRECT_AMOUNT
        MISSING_AUTH: :MISSING_AUTH
        OTHER: :OTHER
        PROCESSING_ERROR: :PROCESSING_ERROR
        RECURRING_TRANSACTION_NOT_CANCELLED: :RECURRING_TRANSACTION_NOT_CANCELLED
        REFUND_NOT_PROCESSED: :REFUND_NOT_PROCESSED

        def self?.values: -> ::Array[Lithic::Models::Dispute::reason]
      end

      type resolution_reason =
        :CASE_LOST
        | :NETWORK_REJECTED
        | :NO_DISPUTE_RIGHTS_3DS
        | :NO_DISPUTE_RIGHTS_BELOW_THRESHOLD
        | :NO_DISPUTE_RIGHTS_CONTACTLESS
        | :NO_DISPUTE_RIGHTS_HYBRID
        | :NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS
        | :NO_DISPUTE_RIGHTS_OTHER
        | :PAST_FILING_DATE
        | :PREARBITRATION_REJECTED
        | :PROCESSOR_REJECTED_OTHER
        | :REFUNDED
        | :REFUNDED_AFTER_CHARGEBACK
        | :WITHDRAWN
        | :WON_ARBITRATION
        | :WON_FIRST_CHARGEBACK
        | :WON_PREARBITRATION

      module ResolutionReason
        extend Lithic::Internal::Type::Enum

        CASE_LOST: :CASE_LOST
        NETWORK_REJECTED: :NETWORK_REJECTED
        NO_DISPUTE_RIGHTS_3DS: :NO_DISPUTE_RIGHTS_3DS
        NO_DISPUTE_RIGHTS_BELOW_THRESHOLD: :NO_DISPUTE_RIGHTS_BELOW_THRESHOLD
        NO_DISPUTE_RIGHTS_CONTACTLESS: :NO_DISPUTE_RIGHTS_CONTACTLESS
        NO_DISPUTE_RIGHTS_HYBRID: :NO_DISPUTE_RIGHTS_HYBRID
        NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS: :NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS
        NO_DISPUTE_RIGHTS_OTHER: :NO_DISPUTE_RIGHTS_OTHER
        PAST_FILING_DATE: :PAST_FILING_DATE
        PREARBITRATION_REJECTED: :PREARBITRATION_REJECTED
        PROCESSOR_REJECTED_OTHER: :PROCESSOR_REJECTED_OTHER
        REFUNDED: :REFUNDED
        REFUNDED_AFTER_CHARGEBACK: :REFUNDED_AFTER_CHARGEBACK
        WITHDRAWN: :WITHDRAWN
        WON_ARBITRATION: :WON_ARBITRATION
        WON_FIRST_CHARGEBACK: :WON_FIRST_CHARGEBACK
        WON_PREARBITRATION: :WON_PREARBITRATION

        def self?.values: -> ::Array[Lithic::Models::Dispute::resolution_reason]
      end

      type status =
        :ARBITRATION
        | :CASE_CLOSED
        | :CASE_WON
        | :NEW
        | :PENDING_CUSTOMER
        | :PREARBITRATION
        | :REPRESENTMENT
        | :SUBMITTED

      module Status
        extend Lithic::Internal::Type::Enum

        ARBITRATION: :ARBITRATION
        CASE_CLOSED: :CASE_CLOSED
        CASE_WON: :CASE_WON
        NEW: :NEW
        PENDING_CUSTOMER: :PENDING_CUSTOMER
        PREARBITRATION: :PREARBITRATION
        REPRESENTMENT: :REPRESENTMENT
        SUBMITTED: :SUBMITTED

        def self?.values: -> ::Array[Lithic::Models::Dispute::status]
      end
    end
  end
end
