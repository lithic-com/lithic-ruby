module Lithic
  module Models
    type account_activity_list_response =
      Lithic::Models::AccountActivityListResponse::FinancialTransaction
      | Lithic::Models::AccountActivityListResponse::BookTransferTransaction
      | Lithic::Models::AccountActivityListResponse::CardTransaction
      | Lithic::Models::AccountActivityListResponse::PaymentTransaction
      | Lithic::ExternalPayment
      | Lithic::ManagementOperationTransaction

    module AccountActivityListResponse
      extend Lithic::Internal::Type::Union

      type financial_transaction =
        {
          token: String,
          category: Lithic::Models::AccountActivityListResponse::FinancialTransaction::category,
          created: Time,
          currency: String,
          descriptor: String,
          events: ::Array[Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event],
          family: Lithic::Models::AccountActivityListResponse::FinancialTransaction::family,
          financial_account_token: String,
          pending_amount: Integer,
          result: Lithic::Models::AccountActivityListResponse::FinancialTransaction::result,
          settled_amount: Integer,
          status: Lithic::Models::AccountActivityListResponse::FinancialTransaction::status,
          updated: Time
        }

      class FinancialTransaction < Lithic::Internal::Type::BaseModel
        attr_accessor token: String

        attr_accessor category: Lithic::Models::AccountActivityListResponse::FinancialTransaction::category

        attr_accessor created: Time

        attr_accessor currency: String

        attr_accessor descriptor: String

        attr_accessor events: ::Array[Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event]

        attr_accessor family: Lithic::Models::AccountActivityListResponse::FinancialTransaction::family

        attr_accessor financial_account_token: String

        attr_accessor pending_amount: Integer

        attr_accessor result: Lithic::Models::AccountActivityListResponse::FinancialTransaction::result

        attr_accessor settled_amount: Integer

        attr_accessor status: Lithic::Models::AccountActivityListResponse::FinancialTransaction::status

        attr_accessor updated: Time

        def initialize: (
          token: String,
          category: Lithic::Models::AccountActivityListResponse::FinancialTransaction::category,
          created: Time,
          currency: String,
          descriptor: String,
          events: ::Array[Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event],
          family: Lithic::Models::AccountActivityListResponse::FinancialTransaction::family,
          financial_account_token: String,
          pending_amount: Integer,
          result: Lithic::Models::AccountActivityListResponse::FinancialTransaction::result,
          settled_amount: Integer,
          status: Lithic::Models::AccountActivityListResponse::FinancialTransaction::status,
          updated: Time
        ) -> void

        def to_hash: -> {
          token: String,
          category: Lithic::Models::AccountActivityListResponse::FinancialTransaction::category,
          created: Time,
          currency: String,
          descriptor: String,
          events: ::Array[Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event],
          family: Lithic::Models::AccountActivityListResponse::FinancialTransaction::family,
          financial_account_token: String,
          pending_amount: Integer,
          result: Lithic::Models::AccountActivityListResponse::FinancialTransaction::result,
          settled_amount: Integer,
          status: Lithic::Models::AccountActivityListResponse::FinancialTransaction::status,
          updated: Time
        }

        type category =
          :ACH
          | :BALANCE_OR_FUNDING
          | :FEE
          | :REWARD
          | :ADJUSTMENT
          | :DERECOGNITION
          | :DISPUTE
          | :CARD
          | :EXTERNAL_ACH
          | :EXTERNAL_CHECK
          | :EXTERNAL_TRANSFER
          | :EXTERNAL_WIRE
          | :MANAGEMENT_ADJUSTMENT
          | :MANAGEMENT_DISPUTE
          | :MANAGEMENT_FEE
          | :MANAGEMENT_REWARD
          | :MANAGEMENT_DISBURSEMENT
          | :PROGRAM_FUNDING

        module Category
          extend Lithic::Internal::Type::Enum

          ACH: :ACH
          BALANCE_OR_FUNDING: :BALANCE_OR_FUNDING
          FEE: :FEE
          REWARD: :REWARD
          ADJUSTMENT: :ADJUSTMENT
          DERECOGNITION: :DERECOGNITION
          DISPUTE: :DISPUTE
          CARD: :CARD
          EXTERNAL_ACH: :EXTERNAL_ACH
          EXTERNAL_CHECK: :EXTERNAL_CHECK
          EXTERNAL_TRANSFER: :EXTERNAL_TRANSFER
          EXTERNAL_WIRE: :EXTERNAL_WIRE
          MANAGEMENT_ADJUSTMENT: :MANAGEMENT_ADJUSTMENT
          MANAGEMENT_DISPUTE: :MANAGEMENT_DISPUTE
          MANAGEMENT_FEE: :MANAGEMENT_FEE
          MANAGEMENT_REWARD: :MANAGEMENT_REWARD
          MANAGEMENT_DISBURSEMENT: :MANAGEMENT_DISBURSEMENT
          PROGRAM_FUNDING: :PROGRAM_FUNDING

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::FinancialTransaction::category]
        end

        type event =
          {
            token: String,
            amount: Integer,
            created: Time,
            result: Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::result,
            type: Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::type_
          }

        class Event < Lithic::Internal::Type::BaseModel
          attr_reader token: String?

          def token=: (String) -> String

          attr_reader amount: Integer?

          def amount=: (Integer) -> Integer

          attr_reader created: Time?

          def created=: (Time) -> Time

          attr_reader result: Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::result?

          def result=: (
            Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::result
          ) -> Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::result

          attr_reader type: Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::type_?

          def type=: (
            Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::type_
          ) -> Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::type_

          def initialize: (
            ?token: String,
            ?amount: Integer,
            ?created: Time,
            ?result: Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::result,
            ?type: Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::type_
          ) -> void

          def to_hash: -> {
            token: String,
            amount: Integer,
            created: Time,
            result: Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::result,
            type: Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::type_
          }

          type result = :APPROVED | :DECLINED

          module Result
            extend Lithic::Internal::Type::Enum

            APPROVED: :APPROVED
            DECLINED: :DECLINED

            def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::result]
          end

          type type_ =
            :ACH_ORIGINATION_CANCELLED
            | :ACH_ORIGINATION_INITIATED
            | :ACH_ORIGINATION_PROCESSED
            | :ACH_ORIGINATION_RELEASED
            | :ACH_ORIGINATION_REJECTED
            | :ACH_ORIGINATION_REVIEWED
            | :ACH_ORIGINATION_SETTLED
            | :ACH_RECEIPT_PROCESSED
            | :ACH_RECEIPT_SETTLED
            | :ACH_RETURN_INITIATED
            | :ACH_RETURN_PROCESSED
            | :ACH_RETURN_REJECTED
            | :ACH_RETURN_SETTLED
            | :AUTHORIZATION
            | :AUTHORIZATION_ADVICE
            | :AUTHORIZATION_EXPIRY
            | :AUTHORIZATION_REVERSAL
            | :BALANCE_INQUIRY
            | :BILLING_ERROR
            | :BILLING_ERROR_REVERSAL
            | :CARD_TO_CARD
            | :CASH_BACK
            | :CASH_BACK_REVERSAL
            | :CLEARING
            | :COLLECTION
            | :CORRECTION_CREDIT
            | :CORRECTION_DEBIT
            | :CREDIT_AUTHORIZATION
            | :CREDIT_AUTHORIZATION_ADVICE
            | :CURRENCY_CONVERSION
            | :CURRENCY_CONVERSION_REVERSAL
            | :DISPUTE_WON
            | :EXTERNAL_ACH_CANCELED
            | :EXTERNAL_ACH_INITIATED
            | :EXTERNAL_ACH_RELEASED
            | :EXTERNAL_ACH_REVERSED
            | :EXTERNAL_ACH_SETTLED
            | :EXTERNAL_CHECK_CANCELED
            | :EXTERNAL_CHECK_INITIATED
            | :EXTERNAL_CHECK_RELEASED
            | :EXTERNAL_CHECK_REVERSED
            | :EXTERNAL_CHECK_SETTLED
            | :EXTERNAL_TRANSFER_CANCELED
            | :EXTERNAL_TRANSFER_INITIATED
            | :EXTERNAL_TRANSFER_RELEASED
            | :EXTERNAL_TRANSFER_REVERSED
            | :EXTERNAL_TRANSFER_SETTLED
            | :EXTERNAL_WIRE_CANCELED
            | :EXTERNAL_WIRE_INITIATED
            | :EXTERNAL_WIRE_RELEASED
            | :EXTERNAL_WIRE_REVERSED
            | :EXTERNAL_WIRE_SETTLED
            | :FINANCIAL_AUTHORIZATION
            | :FINANCIAL_CREDIT_AUTHORIZATION
            | :INTEREST
            | :INTEREST_REVERSAL
            | :INTERNAL_ADJUSTMENT
            | :LATE_PAYMENT
            | :LATE_PAYMENT_REVERSAL
            | :LOSS_WRITE_OFF
            | :PROVISIONAL_CREDIT
            | :PROVISIONAL_CREDIT_REVERSAL
            | :SERVICE
            | :RETURN
            | :RETURN_REVERSAL
            | :TRANSFER
            | :TRANSFER_INSUFFICIENT_FUNDS
            | :RETURNED_PAYMENT
            | :RETURNED_PAYMENT_REVERSAL
            | :LITHIC_NETWORK_PAYMENT

          module Type
            extend Lithic::Internal::Type::Enum

            ACH_ORIGINATION_CANCELLED: :ACH_ORIGINATION_CANCELLED
            ACH_ORIGINATION_INITIATED: :ACH_ORIGINATION_INITIATED
            ACH_ORIGINATION_PROCESSED: :ACH_ORIGINATION_PROCESSED
            ACH_ORIGINATION_RELEASED: :ACH_ORIGINATION_RELEASED
            ACH_ORIGINATION_REJECTED: :ACH_ORIGINATION_REJECTED
            ACH_ORIGINATION_REVIEWED: :ACH_ORIGINATION_REVIEWED
            ACH_ORIGINATION_SETTLED: :ACH_ORIGINATION_SETTLED
            ACH_RECEIPT_PROCESSED: :ACH_RECEIPT_PROCESSED
            ACH_RECEIPT_SETTLED: :ACH_RECEIPT_SETTLED
            ACH_RETURN_INITIATED: :ACH_RETURN_INITIATED
            ACH_RETURN_PROCESSED: :ACH_RETURN_PROCESSED
            ACH_RETURN_REJECTED: :ACH_RETURN_REJECTED
            ACH_RETURN_SETTLED: :ACH_RETURN_SETTLED
            AUTHORIZATION: :AUTHORIZATION
            AUTHORIZATION_ADVICE: :AUTHORIZATION_ADVICE
            AUTHORIZATION_EXPIRY: :AUTHORIZATION_EXPIRY
            AUTHORIZATION_REVERSAL: :AUTHORIZATION_REVERSAL
            BALANCE_INQUIRY: :BALANCE_INQUIRY
            BILLING_ERROR: :BILLING_ERROR
            BILLING_ERROR_REVERSAL: :BILLING_ERROR_REVERSAL
            CARD_TO_CARD: :CARD_TO_CARD
            CASH_BACK: :CASH_BACK
            CASH_BACK_REVERSAL: :CASH_BACK_REVERSAL
            CLEARING: :CLEARING
            COLLECTION: :COLLECTION
            CORRECTION_CREDIT: :CORRECTION_CREDIT
            CORRECTION_DEBIT: :CORRECTION_DEBIT
            CREDIT_AUTHORIZATION: :CREDIT_AUTHORIZATION
            CREDIT_AUTHORIZATION_ADVICE: :CREDIT_AUTHORIZATION_ADVICE
            CURRENCY_CONVERSION: :CURRENCY_CONVERSION
            CURRENCY_CONVERSION_REVERSAL: :CURRENCY_CONVERSION_REVERSAL
            DISPUTE_WON: :DISPUTE_WON
            EXTERNAL_ACH_CANCELED: :EXTERNAL_ACH_CANCELED
            EXTERNAL_ACH_INITIATED: :EXTERNAL_ACH_INITIATED
            EXTERNAL_ACH_RELEASED: :EXTERNAL_ACH_RELEASED
            EXTERNAL_ACH_REVERSED: :EXTERNAL_ACH_REVERSED
            EXTERNAL_ACH_SETTLED: :EXTERNAL_ACH_SETTLED
            EXTERNAL_CHECK_CANCELED: :EXTERNAL_CHECK_CANCELED
            EXTERNAL_CHECK_INITIATED: :EXTERNAL_CHECK_INITIATED
            EXTERNAL_CHECK_RELEASED: :EXTERNAL_CHECK_RELEASED
            EXTERNAL_CHECK_REVERSED: :EXTERNAL_CHECK_REVERSED
            EXTERNAL_CHECK_SETTLED: :EXTERNAL_CHECK_SETTLED
            EXTERNAL_TRANSFER_CANCELED: :EXTERNAL_TRANSFER_CANCELED
            EXTERNAL_TRANSFER_INITIATED: :EXTERNAL_TRANSFER_INITIATED
            EXTERNAL_TRANSFER_RELEASED: :EXTERNAL_TRANSFER_RELEASED
            EXTERNAL_TRANSFER_REVERSED: :EXTERNAL_TRANSFER_REVERSED
            EXTERNAL_TRANSFER_SETTLED: :EXTERNAL_TRANSFER_SETTLED
            EXTERNAL_WIRE_CANCELED: :EXTERNAL_WIRE_CANCELED
            EXTERNAL_WIRE_INITIATED: :EXTERNAL_WIRE_INITIATED
            EXTERNAL_WIRE_RELEASED: :EXTERNAL_WIRE_RELEASED
            EXTERNAL_WIRE_REVERSED: :EXTERNAL_WIRE_REVERSED
            EXTERNAL_WIRE_SETTLED: :EXTERNAL_WIRE_SETTLED
            FINANCIAL_AUTHORIZATION: :FINANCIAL_AUTHORIZATION
            FINANCIAL_CREDIT_AUTHORIZATION: :FINANCIAL_CREDIT_AUTHORIZATION
            INTEREST: :INTEREST
            INTEREST_REVERSAL: :INTEREST_REVERSAL
            INTERNAL_ADJUSTMENT: :INTERNAL_ADJUSTMENT
            LATE_PAYMENT: :LATE_PAYMENT
            LATE_PAYMENT_REVERSAL: :LATE_PAYMENT_REVERSAL
            LOSS_WRITE_OFF: :LOSS_WRITE_OFF
            PROVISIONAL_CREDIT: :PROVISIONAL_CREDIT
            PROVISIONAL_CREDIT_REVERSAL: :PROVISIONAL_CREDIT_REVERSAL
            SERVICE: :SERVICE
            RETURN: :RETURN
            RETURN_REVERSAL: :RETURN_REVERSAL
            TRANSFER: :TRANSFER
            TRANSFER_INSUFFICIENT_FUNDS: :TRANSFER_INSUFFICIENT_FUNDS
            RETURNED_PAYMENT: :RETURNED_PAYMENT
            RETURNED_PAYMENT_REVERSAL: :RETURNED_PAYMENT_REVERSAL
            LITHIC_NETWORK_PAYMENT: :LITHIC_NETWORK_PAYMENT

            def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::FinancialTransaction::Event::type_]
          end
        end

        type family =
          :CARD
          | :PAYMENT
          | :TRANSFER
          | :INTERNAL
          | :EXTERNAL_PAYMENT
          | :MANAGEMENT_OPERATION

        module Family
          extend Lithic::Internal::Type::Enum

          CARD: :CARD
          PAYMENT: :PAYMENT
          TRANSFER: :TRANSFER
          INTERNAL: :INTERNAL
          EXTERNAL_PAYMENT: :EXTERNAL_PAYMENT
          MANAGEMENT_OPERATION: :MANAGEMENT_OPERATION

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::FinancialTransaction::family]
        end

        type result = :APPROVED | :DECLINED

        module Result
          extend Lithic::Internal::Type::Enum

          APPROVED: :APPROVED
          DECLINED: :DECLINED

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::FinancialTransaction::result]
        end

        type status = :PENDING | :SETTLED | :DECLINED | :REVERSED | :CANCELED

        module Status
          extend Lithic::Internal::Type::Enum

          PENDING: :PENDING
          SETTLED: :SETTLED
          DECLINED: :DECLINED
          REVERSED: :REVERSED
          CANCELED: :CANCELED

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::FinancialTransaction::status]
        end
      end

      type book_transfer_transaction =
        {
          token: String,
          category: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::category,
          created: Time,
          currency: String,
          events: ::Array[Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event],
          family: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::family,
          from_financial_account_token: String,
          pending_amount: Integer,
          result: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::result,
          settled_amount: Integer,
          status: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::status,
          to_financial_account_token: String,
          updated: Time,
          external_id: String,
          external_resource: Lithic::ExternalResource?,
          transaction_series: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::TransactionSeries?
        }

      class BookTransferTransaction < Lithic::Internal::Type::BaseModel
        attr_accessor token: String

        attr_accessor category: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::category

        attr_accessor created: Time

        attr_accessor currency: String

        attr_accessor events: ::Array[Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event]

        attr_accessor family: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::family

        attr_accessor from_financial_account_token: String

        attr_accessor pending_amount: Integer

        attr_accessor result: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::result

        attr_accessor settled_amount: Integer

        attr_accessor status: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::status

        attr_accessor to_financial_account_token: String

        attr_accessor updated: Time

        attr_reader external_id: String?

        def external_id=: (String) -> String

        attr_accessor external_resource: Lithic::ExternalResource?

        attr_accessor transaction_series: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::TransactionSeries?

        def initialize: (
          token: String,
          category: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::category,
          created: Time,
          currency: String,
          events: ::Array[Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event],
          family: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::family,
          from_financial_account_token: String,
          pending_amount: Integer,
          result: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::result,
          settled_amount: Integer,
          status: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::status,
          to_financial_account_token: String,
          updated: Time,
          ?external_id: String,
          ?external_resource: Lithic::ExternalResource?,
          ?transaction_series: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::TransactionSeries?
        ) -> void

        def to_hash: -> {
          token: String,
          category: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::category,
          created: Time,
          currency: String,
          events: ::Array[Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event],
          family: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::family,
          from_financial_account_token: String,
          pending_amount: Integer,
          result: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::result,
          settled_amount: Integer,
          status: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::status,
          to_financial_account_token: String,
          updated: Time,
          external_id: String,
          external_resource: Lithic::ExternalResource?,
          transaction_series: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::TransactionSeries?
        }

        type category =
          :ADJUSTMENT
          | :BALANCE_OR_FUNDING
          | :DERECOGNITION
          | :DISPUTE
          | :FEE
          | :INTERNAL
          | :REWARD
          | :PROGRAM_FUNDING
          | :TRANSFER

        module Category
          extend Lithic::Internal::Type::Enum

          ADJUSTMENT: :ADJUSTMENT
          BALANCE_OR_FUNDING: :BALANCE_OR_FUNDING
          DERECOGNITION: :DERECOGNITION
          DISPUTE: :DISPUTE
          FEE: :FEE
          INTERNAL: :INTERNAL
          REWARD: :REWARD
          PROGRAM_FUNDING: :PROGRAM_FUNDING
          TRANSFER: :TRANSFER

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::BookTransferTransaction::category]
        end

        type event =
          {
            token: String,
            amount: Integer,
            created: Time,
            detailed_results: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::detailed_results,
            memo: String,
            result: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::result,
            subtype: String,
            type: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::type_
          }

        class Event < Lithic::Internal::Type::BaseModel
          attr_accessor token: String

          attr_accessor amount: Integer

          attr_accessor created: Time

          attr_accessor detailed_results: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::detailed_results

          attr_accessor memo: String

          attr_accessor result: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::result

          attr_accessor subtype: String

          attr_accessor type: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::type_

          def initialize: (
            token: String,
            amount: Integer,
            created: Time,
            detailed_results: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::detailed_results,
            memo: String,
            result: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::result,
            subtype: String,
            type: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::type_
          ) -> void

          def to_hash: -> {
            token: String,
            amount: Integer,
            created: Time,
            detailed_results: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::detailed_results,
            memo: String,
            result: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::result,
            subtype: String,
            type: Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::type_
          }

          type detailed_results = :APPROVED | :FUNDS_INSUFFICIENT

          module DetailedResults
            extend Lithic::Internal::Type::Enum

            APPROVED: :APPROVED
            FUNDS_INSUFFICIENT: :FUNDS_INSUFFICIENT

            def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::detailed_results]
          end

          type result = :APPROVED | :DECLINED

          module Result
            extend Lithic::Internal::Type::Enum

            APPROVED: :APPROVED
            DECLINED: :DECLINED

            def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::result]
          end

          type type_ =
            :ATM_BALANCE_INQUIRY
            | :ATM_WITHDRAWAL
            | :ATM_DECLINE
            | :INTERNATIONAL_ATM_WITHDRAWAL
            | :INACTIVITY
            | :STATEMENT
            | :MONTHLY
            | :QUARTERLY
            | :ANNUAL
            | :CUSTOMER_SERVICE
            | :ACCOUNT_MAINTENANCE
            | :ACCOUNT_ACTIVATION
            | :ACCOUNT_CLOSURE
            | :CARD_REPLACEMENT
            | :CARD_DELIVERY
            | :CARD_CREATE
            | :CURRENCY_CONVERSION
            | :INTEREST
            | :LATE_PAYMENT
            | :BILL_PAYMENT
            | :CASH_BACK
            | :ACCOUNT_TO_ACCOUNT
            | :CARD_TO_CARD
            | :DISBURSE
            | :BILLING_ERROR
            | :LOSS_WRITE_OFF
            | :EXPIRED_CARD
            | :EARLY_DERECOGNITION
            | :ESCHEATMENT
            | :INACTIVITY_FEE_DOWN
            | :PROVISIONAL_CREDIT
            | :DISPUTE_WON
            | :SERVICE
            | :TRANSFER
            | :COLLECTION

          module Type
            extend Lithic::Internal::Type::Enum

            ATM_BALANCE_INQUIRY: :ATM_BALANCE_INQUIRY
            ATM_WITHDRAWAL: :ATM_WITHDRAWAL
            ATM_DECLINE: :ATM_DECLINE
            INTERNATIONAL_ATM_WITHDRAWAL: :INTERNATIONAL_ATM_WITHDRAWAL
            INACTIVITY: :INACTIVITY
            STATEMENT: :STATEMENT
            MONTHLY: :MONTHLY
            QUARTERLY: :QUARTERLY
            ANNUAL: :ANNUAL
            CUSTOMER_SERVICE: :CUSTOMER_SERVICE
            ACCOUNT_MAINTENANCE: :ACCOUNT_MAINTENANCE
            ACCOUNT_ACTIVATION: :ACCOUNT_ACTIVATION
            ACCOUNT_CLOSURE: :ACCOUNT_CLOSURE
            CARD_REPLACEMENT: :CARD_REPLACEMENT
            CARD_DELIVERY: :CARD_DELIVERY
            CARD_CREATE: :CARD_CREATE
            CURRENCY_CONVERSION: :CURRENCY_CONVERSION
            INTEREST: :INTEREST
            LATE_PAYMENT: :LATE_PAYMENT
            BILL_PAYMENT: :BILL_PAYMENT
            CASH_BACK: :CASH_BACK
            ACCOUNT_TO_ACCOUNT: :ACCOUNT_TO_ACCOUNT
            CARD_TO_CARD: :CARD_TO_CARD
            DISBURSE: :DISBURSE
            BILLING_ERROR: :BILLING_ERROR
            LOSS_WRITE_OFF: :LOSS_WRITE_OFF
            EXPIRED_CARD: :EXPIRED_CARD
            EARLY_DERECOGNITION: :EARLY_DERECOGNITION
            ESCHEATMENT: :ESCHEATMENT
            INACTIVITY_FEE_DOWN: :INACTIVITY_FEE_DOWN
            PROVISIONAL_CREDIT: :PROVISIONAL_CREDIT
            DISPUTE_WON: :DISPUTE_WON
            SERVICE: :SERVICE
            TRANSFER: :TRANSFER
            COLLECTION: :COLLECTION

            def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::BookTransferTransaction::Event::type_]
          end
        end

        type family =
          :CARD
          | :PAYMENT
          | :TRANSFER
          | :INTERNAL
          | :EXTERNAL_PAYMENT
          | :MANAGEMENT_OPERATION

        module Family
          extend Lithic::Internal::Type::Enum

          CARD: :CARD
          PAYMENT: :PAYMENT
          TRANSFER: :TRANSFER
          INTERNAL: :INTERNAL
          EXTERNAL_PAYMENT: :EXTERNAL_PAYMENT
          MANAGEMENT_OPERATION: :MANAGEMENT_OPERATION

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::BookTransferTransaction::family]
        end

        type result = :APPROVED | :DECLINED

        module Result
          extend Lithic::Internal::Type::Enum

          APPROVED: :APPROVED
          DECLINED: :DECLINED

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::BookTransferTransaction::result]
        end

        type status = :PENDING | :SETTLED | :DECLINED | :REVERSED | :CANCELED

        module Status
          extend Lithic::Internal::Type::Enum

          PENDING: :PENDING
          SETTLED: :SETTLED
          DECLINED: :DECLINED
          REVERSED: :REVERSED
          CANCELED: :CANCELED

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::BookTransferTransaction::status]
        end

        type transaction_series =
          {
            related_transaction_event_token: String?,
            related_transaction_token: String?,
            type: String
          }

        class TransactionSeries < Lithic::Internal::Type::BaseModel
          attr_accessor related_transaction_event_token: String?

          attr_accessor related_transaction_token: String?

          attr_accessor type: String

          def initialize: (
            related_transaction_event_token: String?,
            related_transaction_token: String?,
            type: String
          ) -> void

          def to_hash: -> {
            related_transaction_event_token: String?,
            related_transaction_token: String?,
            type: String
          }
        end
      end

      type card_transaction =
        {
          token: String,
          created: Time,
          family: Lithic::Models::AccountActivityListResponse::CardTransaction::family,
          status: Lithic::Models::AccountActivityListResponse::CardTransaction::status,
          updated: Time
        }

      class CardTransaction < Lithic::Models::Transaction
        def token: -> String

        def token=: (String _) -> String

        def created: -> Time

        def created=: (Time _) -> Time

        def family: -> Lithic::Models::AccountActivityListResponse::CardTransaction::family

        def family=: (
          Lithic::Models::AccountActivityListResponse::CardTransaction::family _
        ) -> Lithic::Models::AccountActivityListResponse::CardTransaction::family

        def status: -> Lithic::Models::AccountActivityListResponse::CardTransaction::status

        def status=: (
          Lithic::Models::AccountActivityListResponse::CardTransaction::status _
        ) -> Lithic::Models::AccountActivityListResponse::CardTransaction::status

        def updated: -> Time

        def updated=: (Time _) -> Time

        def initialize: (
          token: String,
          created: Time,
          family: Lithic::Models::AccountActivityListResponse::CardTransaction::family,
          status: Lithic::Models::AccountActivityListResponse::CardTransaction::status,
          updated: Time
        ) -> void

        def to_hash: -> {
          token: String,
          created: Time,
          family: Lithic::Models::AccountActivityListResponse::CardTransaction::family,
          status: Lithic::Models::AccountActivityListResponse::CardTransaction::status,
          updated: Time
        }

        type family =
          :CARD
          | :PAYMENT
          | :TRANSFER
          | :INTERNAL
          | :EXTERNAL_PAYMENT
          | :MANAGEMENT_OPERATION

        module Family
          extend Lithic::Internal::Type::Enum

          CARD: :CARD
          PAYMENT: :PAYMENT
          TRANSFER: :TRANSFER
          INTERNAL: :INTERNAL
          EXTERNAL_PAYMENT: :EXTERNAL_PAYMENT
          MANAGEMENT_OPERATION: :MANAGEMENT_OPERATION

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::CardTransaction::family]
        end

        type status = :PENDING | :SETTLED | :DECLINED | :REVERSED | :CANCELED

        module Status
          extend Lithic::Internal::Type::Enum

          PENDING: :PENDING
          SETTLED: :SETTLED
          DECLINED: :DECLINED
          REVERSED: :REVERSED
          CANCELED: :CANCELED

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::CardTransaction::status]
        end
      end

      type payment_transaction =
        {
          token: String,
          category: Lithic::Models::AccountActivityListResponse::PaymentTransaction::category,
          created: Time,
          descriptor: String,
          direction: Lithic::Models::AccountActivityListResponse::PaymentTransaction::direction,
          events: ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event],
          family: Lithic::Models::AccountActivityListResponse::PaymentTransaction::family,
          financial_account_token: String,
          method_: Lithic::Models::AccountActivityListResponse::PaymentTransaction::method_,
          method_attributes: Lithic::Models::AccountActivityListResponse::PaymentTransaction::method_attributes,
          pending_amount: Integer,
          related_account_tokens: Lithic::Models::AccountActivityListResponse::PaymentTransaction::RelatedAccountTokens,
          result: Lithic::Models::AccountActivityListResponse::PaymentTransaction::result,
          settled_amount: Integer,
          source: Lithic::Models::AccountActivityListResponse::PaymentTransaction::source,
          status: Lithic::Models::AccountActivityListResponse::PaymentTransaction::status,
          updated: Time,
          currency: String,
          expected_release_date: Date?,
          external_bank_account_token: String?,
          type: Lithic::Models::AccountActivityListResponse::PaymentTransaction::type_,
          user_defined_id: String?
        }

      class PaymentTransaction < Lithic::Internal::Type::BaseModel
        attr_accessor token: String

        attr_accessor category: Lithic::Models::AccountActivityListResponse::PaymentTransaction::category

        attr_accessor created: Time

        attr_accessor descriptor: String

        attr_accessor direction: Lithic::Models::AccountActivityListResponse::PaymentTransaction::direction

        attr_accessor events: ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event]

        attr_accessor family: Lithic::Models::AccountActivityListResponse::PaymentTransaction::family

        attr_accessor financial_account_token: String

        attr_accessor method_: Lithic::Models::AccountActivityListResponse::PaymentTransaction::method_

        attr_accessor method_attributes: Lithic::Models::AccountActivityListResponse::PaymentTransaction::method_attributes

        attr_accessor pending_amount: Integer

        attr_accessor related_account_tokens: Lithic::Models::AccountActivityListResponse::PaymentTransaction::RelatedAccountTokens

        attr_accessor result: Lithic::Models::AccountActivityListResponse::PaymentTransaction::result

        attr_accessor settled_amount: Integer

        attr_accessor source: Lithic::Models::AccountActivityListResponse::PaymentTransaction::source

        attr_accessor status: Lithic::Models::AccountActivityListResponse::PaymentTransaction::status

        attr_accessor updated: Time

        attr_reader currency: String?

        def currency=: (String) -> String

        attr_accessor expected_release_date: Date?

        attr_accessor external_bank_account_token: String?

        attr_reader type: Lithic::Models::AccountActivityListResponse::PaymentTransaction::type_?

        def type=: (
          Lithic::Models::AccountActivityListResponse::PaymentTransaction::type_
        ) -> Lithic::Models::AccountActivityListResponse::PaymentTransaction::type_

        attr_accessor user_defined_id: String?

        def initialize: (
          token: String,
          category: Lithic::Models::AccountActivityListResponse::PaymentTransaction::category,
          created: Time,
          descriptor: String,
          direction: Lithic::Models::AccountActivityListResponse::PaymentTransaction::direction,
          events: ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event],
          family: Lithic::Models::AccountActivityListResponse::PaymentTransaction::family,
          financial_account_token: String,
          method_: Lithic::Models::AccountActivityListResponse::PaymentTransaction::method_,
          method_attributes: Lithic::Models::AccountActivityListResponse::PaymentTransaction::method_attributes,
          pending_amount: Integer,
          related_account_tokens: Lithic::Models::AccountActivityListResponse::PaymentTransaction::RelatedAccountTokens,
          result: Lithic::Models::AccountActivityListResponse::PaymentTransaction::result,
          settled_amount: Integer,
          source: Lithic::Models::AccountActivityListResponse::PaymentTransaction::source,
          status: Lithic::Models::AccountActivityListResponse::PaymentTransaction::status,
          updated: Time,
          ?currency: String,
          ?expected_release_date: Date?,
          ?external_bank_account_token: String?,
          ?type: Lithic::Models::AccountActivityListResponse::PaymentTransaction::type_,
          ?user_defined_id: String?
        ) -> void

        def to_hash: -> {
          token: String,
          category: Lithic::Models::AccountActivityListResponse::PaymentTransaction::category,
          created: Time,
          descriptor: String,
          direction: Lithic::Models::AccountActivityListResponse::PaymentTransaction::direction,
          events: ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event],
          family: Lithic::Models::AccountActivityListResponse::PaymentTransaction::family,
          financial_account_token: String,
          method_: Lithic::Models::AccountActivityListResponse::PaymentTransaction::method_,
          method_attributes: Lithic::Models::AccountActivityListResponse::PaymentTransaction::method_attributes,
          pending_amount: Integer,
          related_account_tokens: Lithic::Models::AccountActivityListResponse::PaymentTransaction::RelatedAccountTokens,
          result: Lithic::Models::AccountActivityListResponse::PaymentTransaction::result,
          settled_amount: Integer,
          source: Lithic::Models::AccountActivityListResponse::PaymentTransaction::source,
          status: Lithic::Models::AccountActivityListResponse::PaymentTransaction::status,
          updated: Time,
          currency: String,
          expected_release_date: Date?,
          external_bank_account_token: String?,
          type: Lithic::Models::AccountActivityListResponse::PaymentTransaction::type_,
          user_defined_id: String?
        }

        type category =
          :ACH
          | :BALANCE_OR_FUNDING
          | :FEE
          | :REWARD
          | :ADJUSTMENT
          | :DERECOGNITION
          | :DISPUTE
          | :CARD
          | :EXTERNAL_ACH
          | :EXTERNAL_CHECK
          | :EXTERNAL_TRANSFER
          | :EXTERNAL_WIRE
          | :MANAGEMENT_ADJUSTMENT
          | :MANAGEMENT_DISPUTE
          | :MANAGEMENT_FEE
          | :MANAGEMENT_REWARD
          | :MANAGEMENT_DISBURSEMENT
          | :PROGRAM_FUNDING

        module Category
          extend Lithic::Internal::Type::Enum

          ACH: :ACH
          BALANCE_OR_FUNDING: :BALANCE_OR_FUNDING
          FEE: :FEE
          REWARD: :REWARD
          ADJUSTMENT: :ADJUSTMENT
          DERECOGNITION: :DERECOGNITION
          DISPUTE: :DISPUTE
          CARD: :CARD
          EXTERNAL_ACH: :EXTERNAL_ACH
          EXTERNAL_CHECK: :EXTERNAL_CHECK
          EXTERNAL_TRANSFER: :EXTERNAL_TRANSFER
          EXTERNAL_WIRE: :EXTERNAL_WIRE
          MANAGEMENT_ADJUSTMENT: :MANAGEMENT_ADJUSTMENT
          MANAGEMENT_DISPUTE: :MANAGEMENT_DISPUTE
          MANAGEMENT_FEE: :MANAGEMENT_FEE
          MANAGEMENT_REWARD: :MANAGEMENT_REWARD
          MANAGEMENT_DISBURSEMENT: :MANAGEMENT_DISBURSEMENT
          PROGRAM_FUNDING: :PROGRAM_FUNDING

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::category]
        end

        type direction = :CREDIT | :DEBIT

        module Direction
          extend Lithic::Internal::Type::Enum

          CREDIT: :CREDIT
          DEBIT: :DEBIT

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::direction]
        end

        type event =
          {
            token: String,
            amount: Integer,
            created: Time,
            result: Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::result,
            type: Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::type_,
            detailed_results: ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::detailed_result]
          }

        class Event < Lithic::Internal::Type::BaseModel
          attr_accessor token: String

          attr_accessor amount: Integer

          attr_accessor created: Time

          attr_accessor result: Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::result

          attr_accessor type: Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::type_

          attr_reader detailed_results: ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::detailed_result]?

          def detailed_results=: (
            ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::detailed_result]
          ) -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::detailed_result]

          def initialize: (
            token: String,
            amount: Integer,
            created: Time,
            result: Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::result,
            type: Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::type_,
            ?detailed_results: ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::detailed_result]
          ) -> void

          def to_hash: -> {
            token: String,
            amount: Integer,
            created: Time,
            result: Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::result,
            type: Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::type_,
            detailed_results: ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::detailed_result]
          }

          type result = :APPROVED | :DECLINED

          module Result
            extend Lithic::Internal::Type::Enum

            APPROVED: :APPROVED
            DECLINED: :DECLINED

            def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::result]
          end

          type type_ =
            :ACH_ORIGINATION_CANCELLED
            | :ACH_ORIGINATION_INITIATED
            | :ACH_ORIGINATION_PROCESSED
            | :ACH_ORIGINATION_SETTLED
            | :ACH_ORIGINATION_RELEASED
            | :ACH_ORIGINATION_REVIEWED
            | :ACH_RECEIPT_PROCESSED
            | :ACH_RECEIPT_SETTLED
            | :ACH_RETURN_INITIATED
            | :ACH_RETURN_PROCESSED
            | :ACH_RETURN_SETTLED

          module Type
            extend Lithic::Internal::Type::Enum

            ACH_ORIGINATION_CANCELLED: :ACH_ORIGINATION_CANCELLED
            ACH_ORIGINATION_INITIATED: :ACH_ORIGINATION_INITIATED
            ACH_ORIGINATION_PROCESSED: :ACH_ORIGINATION_PROCESSED
            ACH_ORIGINATION_SETTLED: :ACH_ORIGINATION_SETTLED
            ACH_ORIGINATION_RELEASED: :ACH_ORIGINATION_RELEASED
            ACH_ORIGINATION_REVIEWED: :ACH_ORIGINATION_REVIEWED
            ACH_RECEIPT_PROCESSED: :ACH_RECEIPT_PROCESSED
            ACH_RECEIPT_SETTLED: :ACH_RECEIPT_SETTLED
            ACH_RETURN_INITIATED: :ACH_RETURN_INITIATED
            ACH_RETURN_PROCESSED: :ACH_RETURN_PROCESSED
            ACH_RETURN_SETTLED: :ACH_RETURN_SETTLED

            def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::type_]
          end

          type detailed_result =
            :APPROVED
            | :FUNDS_INSUFFICIENT
            | :ACCOUNT_INVALID
            | :PROGRAM_TRANSACTION_LIMIT_EXCEEDED
            | :PROGRAM_DAILY_LIMIT_EXCEEDED
            | :PROGRAM_MONTHLY_LIMIT_EXCEEDED

          module DetailedResult
            extend Lithic::Internal::Type::Enum

            APPROVED: :APPROVED
            FUNDS_INSUFFICIENT: :FUNDS_INSUFFICIENT
            ACCOUNT_INVALID: :ACCOUNT_INVALID
            PROGRAM_TRANSACTION_LIMIT_EXCEEDED: :PROGRAM_TRANSACTION_LIMIT_EXCEEDED
            PROGRAM_DAILY_LIMIT_EXCEEDED: :PROGRAM_DAILY_LIMIT_EXCEEDED
            PROGRAM_MONTHLY_LIMIT_EXCEEDED: :PROGRAM_MONTHLY_LIMIT_EXCEEDED

            def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::Event::detailed_result]
          end
        end

        type family =
          :CARD
          | :PAYMENT
          | :TRANSFER
          | :INTERNAL
          | :EXTERNAL_PAYMENT
          | :MANAGEMENT_OPERATION

        module Family
          extend Lithic::Internal::Type::Enum

          CARD: :CARD
          PAYMENT: :PAYMENT
          TRANSFER: :TRANSFER
          INTERNAL: :INTERNAL
          EXTERNAL_PAYMENT: :EXTERNAL_PAYMENT
          MANAGEMENT_OPERATION: :MANAGEMENT_OPERATION

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::family]
        end

        type method_ = :ACH_NEXT_DAY | :ACH_SAME_DAY | :WIRE

        module Method
          extend Lithic::Internal::Type::Enum

          ACH_NEXT_DAY: :ACH_NEXT_DAY
          ACH_SAME_DAY: :ACH_SAME_DAY
          WIRE: :WIRE

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::method_]
        end

        type method_attributes =
          Lithic::Models::AccountActivityListResponse::PaymentTransaction::MethodAttributes::ACHMethodAttributes
          | Lithic::Models::AccountActivityListResponse::PaymentTransaction::MethodAttributes::WireMethodAttributes

        module MethodAttributes
          extend Lithic::Internal::Type::Union

          type ach_method_attributes =
            {
              sec_code: Lithic::Models::AccountActivityListResponse::PaymentTransaction::MethodAttributes::ACHMethodAttributes::sec_code,
              addenda: String?,
              company_id: String?,
              receipt_routing_number: String?,
              retries: Integer?,
              return_reason_code: String?,
              trace_numbers: ::Array[String]
            }

          class ACHMethodAttributes < Lithic::Internal::Type::BaseModel
            attr_accessor sec_code: Lithic::Models::AccountActivityListResponse::PaymentTransaction::MethodAttributes::ACHMethodAttributes::sec_code

            attr_accessor addenda: String?

            attr_accessor company_id: String?

            attr_accessor receipt_routing_number: String?

            attr_accessor retries: Integer?

            attr_accessor return_reason_code: String?

            attr_reader trace_numbers: ::Array[String]?

            def trace_numbers=: (::Array[String]) -> ::Array[String]

            def initialize: (
              sec_code: Lithic::Models::AccountActivityListResponse::PaymentTransaction::MethodAttributes::ACHMethodAttributes::sec_code,
              ?addenda: String?,
              ?company_id: String?,
              ?receipt_routing_number: String?,
              ?retries: Integer?,
              ?return_reason_code: String?,
              ?trace_numbers: ::Array[String]
            ) -> void

            def to_hash: -> {
              sec_code: Lithic::Models::AccountActivityListResponse::PaymentTransaction::MethodAttributes::ACHMethodAttributes::sec_code,
              addenda: String?,
              company_id: String?,
              receipt_routing_number: String?,
              retries: Integer?,
              return_reason_code: String?,
              trace_numbers: ::Array[String]
            }

            type sec_code = :CCD | :PPD | :WEB | :TEL | :CIE | :CTX

            module SecCode
              extend Lithic::Internal::Type::Enum

              CCD: :CCD
              PPD: :PPD
              WEB: :WEB
              TEL: :TEL
              CIE: :CIE
              CTX: :CTX

              def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::MethodAttributes::ACHMethodAttributes::sec_code]
            end
          end

          type wire_method_attributes =
            {
              wire_network: Lithic::Models::AccountActivityListResponse::PaymentTransaction::MethodAttributes::WireMethodAttributes::wire_network,
              creditor: Lithic::WirePartyDetails,
              debtor: Lithic::WirePartyDetails,
              message_id: String?,
              remittance_information: String?,
              wire_message_type: String
            }

          class WireMethodAttributes < Lithic::Internal::Type::BaseModel
            attr_accessor wire_network: Lithic::Models::AccountActivityListResponse::PaymentTransaction::MethodAttributes::WireMethodAttributes::wire_network

            attr_reader creditor: Lithic::WirePartyDetails?

            def creditor=: (
              Lithic::WirePartyDetails
            ) -> Lithic::WirePartyDetails

            attr_reader debtor: Lithic::WirePartyDetails?

            def debtor=: (Lithic::WirePartyDetails) -> Lithic::WirePartyDetails

            attr_accessor message_id: String?

            attr_accessor remittance_information: String?

            attr_reader wire_message_type: String?

            def wire_message_type=: (String) -> String

            def initialize: (
              wire_network: Lithic::Models::AccountActivityListResponse::PaymentTransaction::MethodAttributes::WireMethodAttributes::wire_network,
              ?creditor: Lithic::WirePartyDetails,
              ?debtor: Lithic::WirePartyDetails,
              ?message_id: String?,
              ?remittance_information: String?,
              ?wire_message_type: String
            ) -> void

            def to_hash: -> {
              wire_network: Lithic::Models::AccountActivityListResponse::PaymentTransaction::MethodAttributes::WireMethodAttributes::wire_network,
              creditor: Lithic::WirePartyDetails,
              debtor: Lithic::WirePartyDetails,
              message_id: String?,
              remittance_information: String?,
              wire_message_type: String
            }

            type wire_network = :FEDWIRE | :SWIFT

            module WireNetwork
              extend Lithic::Internal::Type::Enum

              FEDWIRE: :FEDWIRE
              SWIFT: :SWIFT

              def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::MethodAttributes::WireMethodAttributes::wire_network]
            end
          end

          def self?.variants: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::method_attributes]
        end

        type related_account_tokens =
          { account_token: String?, business_account_token: String? }

        class RelatedAccountTokens < Lithic::Internal::Type::BaseModel
          attr_accessor account_token: String?

          attr_accessor business_account_token: String?

          def initialize: (
            account_token: String?,
            business_account_token: String?
          ) -> void

          def to_hash: -> {
            account_token: String?,
            business_account_token: String?
          }
        end

        type result = :APPROVED | :DECLINED

        module Result
          extend Lithic::Internal::Type::Enum

          APPROVED: :APPROVED
          DECLINED: :DECLINED

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::result]
        end

        type source = :LITHIC | :EXTERNAL | :CUSTOMER

        module Source
          extend Lithic::Internal::Type::Enum

          LITHIC: :LITHIC
          EXTERNAL: :EXTERNAL
          CUSTOMER: :CUSTOMER

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::source]
        end

        type status = :PENDING | :SETTLED | :DECLINED | :REVERSED | :CANCELED

        module Status
          extend Lithic::Internal::Type::Enum

          PENDING: :PENDING
          SETTLED: :SETTLED
          DECLINED: :DECLINED
          REVERSED: :REVERSED
          CANCELED: :CANCELED

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::status]
        end

        type type_ =
          :ORIGINATION_CREDIT
          | :ORIGINATION_DEBIT
          | :RECEIPT_CREDIT
          | :RECEIPT_DEBIT
          | :WIRE_INBOUND_PAYMENT
          | :WIRE_INBOUND_ADMIN
          | :WIRE_OUTBOUND_PAYMENT
          | :WIRE_OUTBOUND_ADMIN

        module Type
          extend Lithic::Internal::Type::Enum

          ORIGINATION_CREDIT: :ORIGINATION_CREDIT
          ORIGINATION_DEBIT: :ORIGINATION_DEBIT
          RECEIPT_CREDIT: :RECEIPT_CREDIT
          RECEIPT_DEBIT: :RECEIPT_DEBIT
          WIRE_INBOUND_PAYMENT: :WIRE_INBOUND_PAYMENT
          WIRE_INBOUND_ADMIN: :WIRE_INBOUND_ADMIN
          WIRE_OUTBOUND_PAYMENT: :WIRE_OUTBOUND_PAYMENT
          WIRE_OUTBOUND_ADMIN: :WIRE_OUTBOUND_ADMIN

          def self?.values: -> ::Array[Lithic::Models::AccountActivityListResponse::PaymentTransaction::type_]
        end
      end

      def self?.variants: -> ::Array[Lithic::Models::account_activity_list_response]
    end
  end
end
