module Lithic
  module Models
    type financial_account =
      {
        token: String,
        account_token: String?,
        created: Time,
        credit_configuration: Lithic::Models::FinancialAccount::CreditConfiguration?,
        is_for_benefit_of: bool,
        nickname: String?,
        type: Lithic::Models::FinancialAccount::type_,
        updated: Time,
        account_number: String?,
        routing_number: String?
      }

    class FinancialAccount < Lithic::BaseModel
      attr_accessor token: String

      attr_accessor account_token: String?

      attr_accessor created: Time

      attr_accessor credit_configuration: Lithic::Models::FinancialAccount::CreditConfiguration?

      attr_accessor is_for_benefit_of: bool

      attr_accessor nickname: String?

      attr_accessor type: Lithic::Models::FinancialAccount::type_

      attr_accessor updated: Time

      attr_accessor account_number: String?

      attr_accessor routing_number: String?

      def initialize: (
        token: String,
        account_token: String?,
        created: Time,
        credit_configuration: Lithic::Models::FinancialAccount::CreditConfiguration?,
        is_for_benefit_of: bool,
        nickname: String?,
        type: Lithic::Models::FinancialAccount::type_,
        updated: Time,
        ?account_number: String?,
        ?routing_number: String?
      ) -> void

      def to_hash: -> Lithic::Models::financial_account

      type credit_configuration =
        {
          charged_off_reason: Lithic::Models::FinancialAccount::CreditConfiguration::charged_off_reason?,
          credit_limit: Integer?,
          credit_product_token: String?,
          external_bank_account_token: String?,
          financial_account_state: Lithic::Models::FinancialAccount::CreditConfiguration::financial_account_state?,
          is_spend_blocked: bool,
          tier: String?
        }

      class CreditConfiguration < Lithic::BaseModel
        attr_accessor charged_off_reason: Lithic::Models::FinancialAccount::CreditConfiguration::charged_off_reason?

        attr_accessor credit_limit: Integer?

        attr_accessor credit_product_token: String?

        attr_accessor external_bank_account_token: String?

        attr_accessor financial_account_state: Lithic::Models::FinancialAccount::CreditConfiguration::financial_account_state?

        attr_accessor is_spend_blocked: bool

        attr_accessor tier: String?

        def initialize: (
          charged_off_reason: Lithic::Models::FinancialAccount::CreditConfiguration::charged_off_reason?,
          credit_limit: Integer?,
          credit_product_token: String?,
          external_bank_account_token: String?,
          financial_account_state: Lithic::Models::FinancialAccount::CreditConfiguration::financial_account_state?,
          is_spend_blocked: bool,
          tier: String?
        ) -> void

        def to_hash: -> Lithic::Models::FinancialAccount::credit_configuration

        type charged_off_reason = :DELINQUENT | :FRAUD

        module ChargedOffReason
          extend Lithic::Enum

          DELINQUENT: :DELINQUENT
          FRAUD: :FRAUD

          def self?.values: -> ::Array[Lithic::Models::FinancialAccount::CreditConfiguration::charged_off_reason]
        end

        type financial_account_state =
          :PENDING | :CURRENT | :DELINQUENT | :CHARGED_OFF

        module FinancialAccountState
          extend Lithic::Enum

          PENDING: :PENDING
          CURRENT: :CURRENT
          DELINQUENT: :DELINQUENT
          CHARGED_OFF: :CHARGED_OFF

          def self?.values: -> ::Array[Lithic::Models::FinancialAccount::CreditConfiguration::financial_account_state]
        end
      end

      type type_ = :ISSUING | :RESERVE | :OPERATING

      module Type
        extend Lithic::Enum

        ISSUING: :ISSUING
        RESERVE: :RESERVE
        OPERATING: :OPERATING

        def self?.values: -> ::Array[Lithic::Models::FinancialAccount::type_]
      end
    end
  end
end
