module Lithic
  module Models
    type card_convert_physical_params =
      {
        shipping_address: Lithic::Models::ShippingAddress,
        carrier: Lithic::Models::Carrier,
        product_id: String,
        shipping_method: Lithic::Models::CardConvertPhysicalParams::shipping_method
      }
      & Lithic::request_parameters

    class CardConvertPhysicalParams < Lithic::BaseModel
      extend Lithic::RequestParameters::Converter
      include Lithic::RequestParameters

      attr_accessor shipping_address: Lithic::Models::ShippingAddress

      attr_reader carrier: Lithic::Models::Carrier?

      def carrier=: (Lithic::Models::Carrier) -> Lithic::Models::Carrier

      attr_reader product_id: String?

      def product_id=: (String) -> String

      attr_reader shipping_method: Lithic::Models::CardConvertPhysicalParams::shipping_method?

      def shipping_method=: (
        Lithic::Models::CardConvertPhysicalParams::shipping_method
      ) -> Lithic::Models::CardConvertPhysicalParams::shipping_method

      def initialize: (
        shipping_address: Lithic::Models::ShippingAddress,
        ?carrier: Lithic::Models::Carrier,
        ?product_id: String,
        ?shipping_method: Lithic::Models::CardConvertPhysicalParams::shipping_method,
        ?request_options: Lithic::request_opts
      ) -> void

      def to_hash: -> Lithic::Models::card_convert_physical_params

      type shipping_method =
        :"2-DAY"
        | :EXPEDITED
        | :EXPRESS
        | :PRIORITY
        | :STANDARD
        | :STANDARD_WITH_TRACKING

      module ShippingMethod
        extend Lithic::Enum

        NUMBER_2_DAY: :"2-DAY"
        EXPEDITED: :EXPEDITED
        EXPRESS: :EXPRESS
        PRIORITY: :PRIORITY
        STANDARD: :STANDARD
        STANDARD_WITH_TRACKING: :STANDARD_WITH_TRACKING

        def self?.values: -> ::Array[Lithic::Models::CardConvertPhysicalParams::shipping_method]
      end
    end
  end
end
