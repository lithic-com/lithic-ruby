module Lithic
  module Models
    module Events
      type subscription_list_attempts_params =
        {
          begin_: Time,
          end_: Time,
          ending_before: String,
          page_size: Integer,
          starting_after: String,
          status: Lithic::Models::Events::SubscriptionListAttemptsParams::status
        }
        & Lithic::request_parameters

      class SubscriptionListAttemptsParams < Lithic::BaseModel
        extend Lithic::RequestParameters::Converter
        include Lithic::RequestParameters

        attr_reader begin_: Time?

        def begin_=: (Time) -> Time

        attr_reader end_: Time?

        def end_=: (Time) -> Time

        attr_reader ending_before: String?

        def ending_before=: (String) -> String

        attr_reader page_size: Integer?

        def page_size=: (Integer) -> Integer

        attr_reader starting_after: String?

        def starting_after=: (String) -> String

        attr_reader status: Lithic::Models::Events::SubscriptionListAttemptsParams::status?

        def status=: (
          Lithic::Models::Events::SubscriptionListAttemptsParams::status
        ) -> Lithic::Models::Events::SubscriptionListAttemptsParams::status

        def initialize: (
          ?begin_: Time,
          ?end_: Time,
          ?ending_before: String,
          ?page_size: Integer,
          ?starting_after: String,
          ?status: Lithic::Models::Events::SubscriptionListAttemptsParams::status,
          ?request_options: Lithic::request_opts
        ) -> void

        def to_hash: -> Lithic::Models::Events::subscription_list_attempts_params

        type status = :FAILED | :PENDING | :SENDING | :SUCCESS

        module Status
          extend Lithic::Enum

          FAILED: :FAILED
          PENDING: :PENDING
          SENDING: :SENDING
          SUCCESS: :SUCCESS

          def self?.values: -> ::Array[Lithic::Models::Events::SubscriptionListAttemptsParams::status]
        end
      end
    end
  end
end
