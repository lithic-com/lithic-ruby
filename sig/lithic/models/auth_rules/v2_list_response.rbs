module Lithic
  module Models
    module AuthRules
      type v2_list_response =
        {
          token: String,
          account_tokens: ::Array[String],
          business_account_tokens: ::Array[String],
          card_tokens: ::Array[String],
          current_version: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion?,
          draft_version: Lithic::Models::AuthRules::V2ListResponse::DraftVersion?,
          event_stream: Lithic::Models::AuthRules::V2ListResponse::event_stream,
          name: String?,
          program_level: bool,
          state: Lithic::Models::AuthRules::V2ListResponse::state,
          type: Lithic::Models::AuthRules::V2ListResponse::type_,
          excluded_card_tokens: ::Array[String]
        }

      class V2ListResponse < Lithic::Internal::Type::BaseModel
        attr_accessor token: String

        attr_accessor account_tokens: ::Array[String]

        attr_accessor business_account_tokens: ::Array[String]

        attr_accessor card_tokens: ::Array[String]

        attr_accessor current_version: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion?

        attr_accessor draft_version: Lithic::Models::AuthRules::V2ListResponse::DraftVersion?

        attr_accessor event_stream: Lithic::Models::AuthRules::V2ListResponse::event_stream

        attr_accessor name: String?

        attr_accessor program_level: bool

        attr_accessor state: Lithic::Models::AuthRules::V2ListResponse::state

        attr_accessor type: Lithic::Models::AuthRules::V2ListResponse::type_

        attr_reader excluded_card_tokens: ::Array[String]?

        def excluded_card_tokens=: (::Array[String]) -> ::Array[String]

        def initialize: (
          token: String,
          account_tokens: ::Array[String],
          business_account_tokens: ::Array[String],
          card_tokens: ::Array[String],
          current_version: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion?,
          draft_version: Lithic::Models::AuthRules::V2ListResponse::DraftVersion?,
          event_stream: Lithic::Models::AuthRules::V2ListResponse::event_stream,
          name: String?,
          program_level: bool,
          state: Lithic::Models::AuthRules::V2ListResponse::state,
          type: Lithic::Models::AuthRules::V2ListResponse::type_,
          ?excluded_card_tokens: ::Array[String]
        ) -> void

        def to_hash: -> {
          token: String,
          account_tokens: ::Array[String],
          business_account_tokens: ::Array[String],
          card_tokens: ::Array[String],
          current_version: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion?,
          draft_version: Lithic::Models::AuthRules::V2ListResponse::DraftVersion?,
          event_stream: Lithic::Models::AuthRules::V2ListResponse::event_stream,
          name: String?,
          program_level: bool,
          state: Lithic::Models::AuthRules::V2ListResponse::state,
          type: Lithic::Models::AuthRules::V2ListResponse::type_,
          excluded_card_tokens: ::Array[String]
        }

        type current_version =
          {
            parameters: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::parameters,
            version: Integer
          }

        class CurrentVersion < Lithic::Internal::Type::BaseModel
          attr_accessor parameters: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::parameters

          attr_accessor version: Integer

          def initialize: (
            parameters: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::parameters,
            version: Integer
          ) -> void

          def to_hash: -> {
            parameters: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::parameters,
            version: Integer
          }

          type parameters =
            Lithic::AuthRules::ConditionalBlockParameters
            | Lithic::AuthRules::VelocityLimitParams
            | Lithic::AuthRules::MerchantLockParameters
            | Lithic::AuthRules::Conditional3DSActionParameters
            | Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters

          module Parameters
            extend Lithic::Internal::Type::Union

            type conditional_authorization_action_parameters =
              {
                action: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::action,
                conditions: ::Array[Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition]
              }

            class ConditionalAuthorizationActionParameters < Lithic::Internal::Type::BaseModel
              attr_accessor action: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::action

              attr_accessor conditions: ::Array[Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition]

              def initialize: (
                action: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::action,
                conditions: ::Array[Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition]
              ) -> void

              def to_hash: -> {
                action: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::action,
                conditions: ::Array[Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition]
              }

              type action = :DECLINE | :CHALLENGE

              module Action
                extend Lithic::Internal::Type::Enum

                DECLINE: :DECLINE
                CHALLENGE: :CHALLENGE

                def self?.values: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::action]
              end

              type condition =
                {
                  attribute: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute,
                  operation: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation,
                  value: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value
                }

              class Condition < Lithic::Internal::Type::BaseModel
                attr_reader attribute: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute?

                def attribute=: (
                  Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute
                ) -> Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute

                attr_reader operation: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation?

                def operation=: (
                  Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation
                ) -> Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation

                attr_reader value: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value?

                def value=: (
                  Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value
                ) -> Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value

                def initialize: (
                  ?attribute: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute,
                  ?operation: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation,
                  ?value: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value
                ) -> void

                def to_hash: -> {
                  attribute: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute,
                  operation: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation,
                  value: Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value
                }

                type attribute =
                  :MCC
                  | :COUNTRY
                  | :CURRENCY
                  | :MERCHANT_ID
                  | :DESCRIPTOR
                  | :LIABILITY_SHIFT
                  | :PAN_ENTRY_MODE
                  | :TRANSACTION_AMOUNT
                  | :RISK_SCORE
                  | :CARD_TRANSACTION_COUNT_15M
                  | :CARD_TRANSACTION_COUNT_1H
                  | :CARD_TRANSACTION_COUNT_24H
                  | :CARD_STATE
                  | :PIN_ENTERED
                  | :PIN_STATUS
                  | :WALLET_TYPE
                  | :TRANSACTION_INITIATOR

                module Attribute
                  extend Lithic::Internal::Type::Enum

                  MCC: :MCC
                  COUNTRY: :COUNTRY
                  CURRENCY: :CURRENCY
                  MERCHANT_ID: :MERCHANT_ID
                  DESCRIPTOR: :DESCRIPTOR
                  LIABILITY_SHIFT: :LIABILITY_SHIFT
                  PAN_ENTRY_MODE: :PAN_ENTRY_MODE
                  TRANSACTION_AMOUNT: :TRANSACTION_AMOUNT
                  RISK_SCORE: :RISK_SCORE
                  CARD_TRANSACTION_COUNT_15_M: :CARD_TRANSACTION_COUNT_15M
                  CARD_TRANSACTION_COUNT_1_H: :CARD_TRANSACTION_COUNT_1H
                  CARD_TRANSACTION_COUNT_24_H: :CARD_TRANSACTION_COUNT_24H
                  CARD_STATE: :CARD_STATE
                  PIN_ENTERED: :PIN_ENTERED
                  PIN_STATUS: :PIN_STATUS
                  WALLET_TYPE: :WALLET_TYPE
                  TRANSACTION_INITIATOR: :TRANSACTION_INITIATOR

                  def self?.values: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute]
                end

                type operation =
                  :IS_ONE_OF
                  | :IS_NOT_ONE_OF
                  | :MATCHES
                  | :DOES_NOT_MATCH
                  | :IS_EQUAL_TO
                  | :IS_NOT_EQUAL_TO
                  | :IS_GREATER_THAN
                  | :IS_GREATER_THAN_OR_EQUAL_TO
                  | :IS_LESS_THAN
                  | :IS_LESS_THAN_OR_EQUAL_TO

                module Operation
                  extend Lithic::Internal::Type::Enum

                  IS_ONE_OF: :IS_ONE_OF
                  IS_NOT_ONE_OF: :IS_NOT_ONE_OF
                  MATCHES: :MATCHES
                  DOES_NOT_MATCH: :DOES_NOT_MATCH
                  IS_EQUAL_TO: :IS_EQUAL_TO
                  IS_NOT_EQUAL_TO: :IS_NOT_EQUAL_TO
                  IS_GREATER_THAN: :IS_GREATER_THAN
                  IS_GREATER_THAN_OR_EQUAL_TO: :IS_GREATER_THAN_OR_EQUAL_TO
                  IS_LESS_THAN: :IS_LESS_THAN
                  IS_LESS_THAN_OR_EQUAL_TO: :IS_LESS_THAN_OR_EQUAL_TO

                  def self?.values: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation]
                end

                type value = String | Integer | ::Array[String]

                module Value
                  extend Lithic::Internal::Type::Union

                  def self?.variants: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value]

                  StringArray: Lithic::Internal::Type::Converter
                end
              end
            end

            def self?.variants: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::CurrentVersion::parameters]
          end
        end

        type draft_version =
          {
            parameters: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::parameters,
            version: Integer
          }

        class DraftVersion < Lithic::Internal::Type::BaseModel
          attr_accessor parameters: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::parameters

          attr_accessor version: Integer

          def initialize: (
            parameters: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::parameters,
            version: Integer
          ) -> void

          def to_hash: -> {
            parameters: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::parameters,
            version: Integer
          }

          type parameters =
            Lithic::AuthRules::ConditionalBlockParameters
            | Lithic::AuthRules::VelocityLimitParams
            | Lithic::AuthRules::MerchantLockParameters
            | Lithic::AuthRules::Conditional3DSActionParameters
            | Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters

          module Parameters
            extend Lithic::Internal::Type::Union

            type conditional_authorization_action_parameters =
              {
                action: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::action,
                conditions: ::Array[Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition]
              }

            class ConditionalAuthorizationActionParameters < Lithic::Internal::Type::BaseModel
              attr_accessor action: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::action

              attr_accessor conditions: ::Array[Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition]

              def initialize: (
                action: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::action,
                conditions: ::Array[Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition]
              ) -> void

              def to_hash: -> {
                action: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::action,
                conditions: ::Array[Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition]
              }

              type action = :DECLINE | :CHALLENGE

              module Action
                extend Lithic::Internal::Type::Enum

                DECLINE: :DECLINE
                CHALLENGE: :CHALLENGE

                def self?.values: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::action]
              end

              type condition =
                {
                  attribute: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute,
                  operation: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation,
                  value: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value
                }

              class Condition < Lithic::Internal::Type::BaseModel
                attr_reader attribute: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute?

                def attribute=: (
                  Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute
                ) -> Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute

                attr_reader operation: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation?

                def operation=: (
                  Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation
                ) -> Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation

                attr_reader value: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value?

                def value=: (
                  Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value
                ) -> Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value

                def initialize: (
                  ?attribute: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute,
                  ?operation: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation,
                  ?value: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value
                ) -> void

                def to_hash: -> {
                  attribute: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute,
                  operation: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation,
                  value: Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value
                }

                type attribute =
                  :MCC
                  | :COUNTRY
                  | :CURRENCY
                  | :MERCHANT_ID
                  | :DESCRIPTOR
                  | :LIABILITY_SHIFT
                  | :PAN_ENTRY_MODE
                  | :TRANSACTION_AMOUNT
                  | :RISK_SCORE
                  | :CARD_TRANSACTION_COUNT_15M
                  | :CARD_TRANSACTION_COUNT_1H
                  | :CARD_TRANSACTION_COUNT_24H
                  | :CARD_STATE
                  | :PIN_ENTERED
                  | :PIN_STATUS
                  | :WALLET_TYPE
                  | :TRANSACTION_INITIATOR

                module Attribute
                  extend Lithic::Internal::Type::Enum

                  MCC: :MCC
                  COUNTRY: :COUNTRY
                  CURRENCY: :CURRENCY
                  MERCHANT_ID: :MERCHANT_ID
                  DESCRIPTOR: :DESCRIPTOR
                  LIABILITY_SHIFT: :LIABILITY_SHIFT
                  PAN_ENTRY_MODE: :PAN_ENTRY_MODE
                  TRANSACTION_AMOUNT: :TRANSACTION_AMOUNT
                  RISK_SCORE: :RISK_SCORE
                  CARD_TRANSACTION_COUNT_15_M: :CARD_TRANSACTION_COUNT_15M
                  CARD_TRANSACTION_COUNT_1_H: :CARD_TRANSACTION_COUNT_1H
                  CARD_TRANSACTION_COUNT_24_H: :CARD_TRANSACTION_COUNT_24H
                  CARD_STATE: :CARD_STATE
                  PIN_ENTERED: :PIN_ENTERED
                  PIN_STATUS: :PIN_STATUS
                  WALLET_TYPE: :WALLET_TYPE
                  TRANSACTION_INITIATOR: :TRANSACTION_INITIATOR

                  def self?.values: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::attribute]
                end

                type operation =
                  :IS_ONE_OF
                  | :IS_NOT_ONE_OF
                  | :MATCHES
                  | :DOES_NOT_MATCH
                  | :IS_EQUAL_TO
                  | :IS_NOT_EQUAL_TO
                  | :IS_GREATER_THAN
                  | :IS_GREATER_THAN_OR_EQUAL_TO
                  | :IS_LESS_THAN
                  | :IS_LESS_THAN_OR_EQUAL_TO

                module Operation
                  extend Lithic::Internal::Type::Enum

                  IS_ONE_OF: :IS_ONE_OF
                  IS_NOT_ONE_OF: :IS_NOT_ONE_OF
                  MATCHES: :MATCHES
                  DOES_NOT_MATCH: :DOES_NOT_MATCH
                  IS_EQUAL_TO: :IS_EQUAL_TO
                  IS_NOT_EQUAL_TO: :IS_NOT_EQUAL_TO
                  IS_GREATER_THAN: :IS_GREATER_THAN
                  IS_GREATER_THAN_OR_EQUAL_TO: :IS_GREATER_THAN_OR_EQUAL_TO
                  IS_LESS_THAN: :IS_LESS_THAN
                  IS_LESS_THAN_OR_EQUAL_TO: :IS_LESS_THAN_OR_EQUAL_TO

                  def self?.values: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::operation]
                end

                type value = String | Integer | ::Array[String]

                module Value
                  extend Lithic::Internal::Type::Union

                  def self?.variants: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::DraftVersion::Parameters::ConditionalAuthorizationActionParameters::Condition::value]

                  StringArray: Lithic::Internal::Type::Converter
                end
              end
            end

            def self?.variants: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::DraftVersion::parameters]
          end
        end

        type event_stream = :AUTHORIZATION | :THREE_DS_AUTHENTICATION

        module EventStream
          extend Lithic::Internal::Type::Enum

          AUTHORIZATION: :AUTHORIZATION
          THREE_DS_AUTHENTICATION: :THREE_DS_AUTHENTICATION

          def self?.values: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::event_stream]
        end

        type state = :ACTIVE | :INACTIVE

        module State
          extend Lithic::Internal::Type::Enum

          ACTIVE: :ACTIVE
          INACTIVE: :INACTIVE

          def self?.values: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::state]
        end

        type type_ =
          :CONDITIONAL_BLOCK
          | :VELOCITY_LIMIT
          | :MERCHANT_LOCK
          | :CONDITIONAL_ACTION

        module Type
          extend Lithic::Internal::Type::Enum

          CONDITIONAL_BLOCK: :CONDITIONAL_BLOCK
          VELOCITY_LIMIT: :VELOCITY_LIMIT
          MERCHANT_LOCK: :MERCHANT_LOCK
          CONDITIONAL_ACTION: :CONDITIONAL_ACTION

          def self?.values: -> ::Array[Lithic::Models::AuthRules::V2ListResponse::type_]
        end
      end
    end
  end
end
