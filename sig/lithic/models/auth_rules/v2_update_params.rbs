module Lithic
  module Models
    module AuthRules
      type v2_update_params =
        {
          name: String?,
          state: Lithic::Models::AuthRules::V2UpdateParams::state,
          card_tokens: ::Array[String],
          excluded_card_tokens: ::Array[String],
          program_level: bool
        }
        & Lithic::Internal::Type::request_parameters

      class V2UpdateParams < Lithic::Internal::Type::BaseModel
        extend Lithic::Internal::Type::RequestParameters::Converter
        include Lithic::Internal::Type::RequestParameters

        attr_accessor name: String?

        attr_reader state: Lithic::Models::AuthRules::V2UpdateParams::state?

        def state=: (
          Lithic::Models::AuthRules::V2UpdateParams::state
        ) -> Lithic::Models::AuthRules::V2UpdateParams::state

        attr_reader card_tokens: ::Array[String]?

        def card_tokens=: (::Array[String]) -> ::Array[String]

        attr_reader excluded_card_tokens: ::Array[String]?

        def excluded_card_tokens=: (::Array[String]) -> ::Array[String]

        attr_reader program_level: bool?

        def program_level=: (bool) -> bool

        def initialize: (
          ?name: String?,
          ?state: Lithic::Models::AuthRules::V2UpdateParams::state,
          ?card_tokens: ::Array[String],
          ?excluded_card_tokens: ::Array[String],
          ?program_level: bool,
          ?request_options: Lithic::request_opts
        ) -> void

        def to_hash: -> {
          name: String?,
          state: Lithic::Models::AuthRules::V2UpdateParams::state,
          card_tokens: ::Array[String],
          excluded_card_tokens: ::Array[String],
          program_level: bool,
          request_options: Lithic::RequestOptions
        }

        type state = :INACTIVE

        module State
          extend Lithic::Internal::Type::Enum

          INACTIVE: :INACTIVE

          def self?.values: -> ::Array[Lithic::Models::AuthRules::V2UpdateParams::state]
        end
      end
    end
  end
end
