module Lithic
  module Models
    module AuthRules
      type conditional3_ds_action_parameters =
        {
          action: Lithic::Models::AuthRules::Conditional3DSActionParameters::action,
          conditions: ::Array[Lithic::AuthRules::Conditional3DSActionParameters::Condition]
        }

      class Conditional3DSActionParameters < Lithic::Internal::Type::BaseModel
        attr_accessor action: Lithic::Models::AuthRules::Conditional3DSActionParameters::action

        attr_accessor conditions: ::Array[Lithic::AuthRules::Conditional3DSActionParameters::Condition]

        def initialize: (
          action: Lithic::Models::AuthRules::Conditional3DSActionParameters::action,
          conditions: ::Array[Lithic::AuthRules::Conditional3DSActionParameters::Condition]
        ) -> void

        def to_hash: -> {
          action: Lithic::Models::AuthRules::Conditional3DSActionParameters::action,
          conditions: ::Array[Lithic::AuthRules::Conditional3DSActionParameters::Condition]
        }

        type action = :DECLINE | :CHALLENGE

        module Action
          extend Lithic::Internal::Type::Enum

          DECLINE: :DECLINE
          CHALLENGE: :CHALLENGE

          def self?.values: -> ::Array[Lithic::Models::AuthRules::Conditional3DSActionParameters::action]
        end

        type condition =
          {
            attribute: Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::attribute,
            operation: Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::operation,
            value: Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::value
          }

        class Condition < Lithic::Internal::Type::BaseModel
          attr_reader attribute: Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::attribute?

          def attribute=: (
            Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::attribute
          ) -> Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::attribute

          attr_reader operation: Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::operation?

          def operation=: (
            Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::operation
          ) -> Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::operation

          attr_reader value: Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::value?

          def value=: (
            Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::value
          ) -> Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::value

          def initialize: (
            ?attribute: Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::attribute,
            ?operation: Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::operation,
            ?value: Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::value
          ) -> void

          def to_hash: -> {
            attribute: Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::attribute,
            operation: Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::operation,
            value: Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::value
          }

          type attribute =
            :MCC
            | :COUNTRY
            | :CURRENCY
            | :MERCHANT_ID
            | :DESCRIPTOR
            | :TRANSACTION_AMOUNT
            | :RISK_SCORE
            | :MESSAGE_CATEGORY

          module Attribute
            extend Lithic::Internal::Type::Enum

            MCC: :MCC
            COUNTRY: :COUNTRY
            CURRENCY: :CURRENCY
            MERCHANT_ID: :MERCHANT_ID
            DESCRIPTOR: :DESCRIPTOR
            TRANSACTION_AMOUNT: :TRANSACTION_AMOUNT
            RISK_SCORE: :RISK_SCORE
            MESSAGE_CATEGORY: :MESSAGE_CATEGORY

            def self?.values: -> ::Array[Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::attribute]
          end

          type operation =
            :IS_ONE_OF
            | :IS_NOT_ONE_OF
            | :MATCHES
            | :DOES_NOT_MATCH
            | :IS_EQUAL_TO
            | :IS_NOT_EQUAL_TO
            | :IS_GREATER_THAN
            | :IS_GREATER_THAN_OR_EQUAL_TO
            | :IS_LESS_THAN
            | :IS_LESS_THAN_OR_EQUAL_TO

          module Operation
            extend Lithic::Internal::Type::Enum

            IS_ONE_OF: :IS_ONE_OF
            IS_NOT_ONE_OF: :IS_NOT_ONE_OF
            MATCHES: :MATCHES
            DOES_NOT_MATCH: :DOES_NOT_MATCH
            IS_EQUAL_TO: :IS_EQUAL_TO
            IS_NOT_EQUAL_TO: :IS_NOT_EQUAL_TO
            IS_GREATER_THAN: :IS_GREATER_THAN
            IS_GREATER_THAN_OR_EQUAL_TO: :IS_GREATER_THAN_OR_EQUAL_TO
            IS_LESS_THAN: :IS_LESS_THAN
            IS_LESS_THAN_OR_EQUAL_TO: :IS_LESS_THAN_OR_EQUAL_TO

            def self?.values: -> ::Array[Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::operation]
          end

          type value = String | Integer | ::Array[String]

          module Value
            extend Lithic::Internal::Type::Union

            def self?.variants: -> ::Array[Lithic::Models::AuthRules::Conditional3DSActionParameters::Condition::value]

            StringArray: Lithic::Internal::Type::Converter
          end
        end
      end
    end
  end
end
