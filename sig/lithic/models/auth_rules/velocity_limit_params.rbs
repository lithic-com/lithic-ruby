module Lithic
  module Models
    module AuthRules
      type velocity_limit_params =
        {
          filters: Lithic::Models::AuthRules::VelocityLimitParams::Filters,
          period: Lithic::Models::AuthRules::VelocityLimitParams::period,
          scope: Lithic::Models::AuthRules::VelocityLimitParams::scope,
          limit_amount: Integer?,
          limit_count: Integer?
        }

      class VelocityLimitParams < Lithic::BaseModel
        attr_accessor filters: Lithic::Models::AuthRules::VelocityLimitParams::Filters

        attr_accessor period: Lithic::Models::AuthRules::VelocityLimitParams::period

        attr_accessor scope: Lithic::Models::AuthRules::VelocityLimitParams::scope

        attr_accessor limit_amount: Integer?

        attr_accessor limit_count: Integer?

        def initialize: (
          filters: Lithic::Models::AuthRules::VelocityLimitParams::Filters,
          period: Lithic::Models::AuthRules::VelocityLimitParams::period,
          scope: Lithic::Models::AuthRules::VelocityLimitParams::scope,
          ?limit_amount: Integer?,
          ?limit_count: Integer?
        ) -> void

        def to_hash: -> Lithic::Models::AuthRules::velocity_limit_params

        type filters =
          {
            exclude_countries: ::Array[String]?,
            exclude_mccs: ::Array[String]?,
            include_countries: ::Array[String]?,
            include_mccs: ::Array[String]?
          }

        class Filters < Lithic::BaseModel
          attr_accessor exclude_countries: ::Array[String]?

          attr_accessor exclude_mccs: ::Array[String]?

          attr_accessor include_countries: ::Array[String]?

          attr_accessor include_mccs: ::Array[String]?

          def initialize: (
            ?exclude_countries: ::Array[String]?,
            ?exclude_mccs: ::Array[String]?,
            ?include_countries: ::Array[String]?,
            ?include_mccs: ::Array[String]?
          ) -> void

          def to_hash: -> Lithic::Models::AuthRules::VelocityLimitParams::filters
        end

        type period =
          Integer
          | Lithic::Models::AuthRules::velocity_limit_params_period_window

        module Period
          extend Lithic::Union

          def self.variants: -> [Integer, Lithic::Models::AuthRules::velocity_limit_params_period_window]
        end

        type scope = :CARD | :ACCOUNT

        module Scope
          extend Lithic::Enum

          CARD: :CARD
          ACCOUNT: :ACCOUNT

          def self.values: -> ::Array[Lithic::Models::AuthRules::VelocityLimitParams::scope]
        end
      end
    end
  end
end
