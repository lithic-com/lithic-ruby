module Lithic
  module Models
    module AuthRules
      type v2_create_params =
        {
          account_tokens: ::Array[String],
          name: String?,
          parameters: Lithic::Models::AuthRules::V2CreateParams::parameters,
          type: Lithic::Models::AuthRules::V2CreateParams::type_,
          card_tokens: ::Array[String],
          program_level: bool,
          excluded_card_tokens: ::Array[String]
        }
        & Lithic::Internal::Type::request_parameters

      class V2CreateParams < Lithic::Internal::Type::BaseModel
        extend Lithic::Internal::Type::RequestParameters::Converter
        include Lithic::Internal::Type::RequestParameters

        attr_accessor account_tokens: ::Array[String]

        attr_accessor name: String?

        attr_reader parameters: Lithic::Models::AuthRules::V2CreateParams::parameters?

        def parameters=: (
          Lithic::Models::AuthRules::V2CreateParams::parameters
        ) -> Lithic::Models::AuthRules::V2CreateParams::parameters

        attr_reader type: Lithic::Models::AuthRules::V2CreateParams::type_?

        def type=: (
          Lithic::Models::AuthRules::V2CreateParams::type_
        ) -> Lithic::Models::AuthRules::V2CreateParams::type_

        attr_accessor card_tokens: ::Array[String]

        attr_accessor program_level: bool

        attr_reader excluded_card_tokens: ::Array[String]?

        def excluded_card_tokens=: (::Array[String]) -> ::Array[String]

        def initialize: (
          account_tokens: ::Array[String],
          card_tokens: ::Array[String],
          program_level: bool,
          ?name: String?,
          ?parameters: Lithic::Models::AuthRules::V2CreateParams::parameters,
          ?type: Lithic::Models::AuthRules::V2CreateParams::type_,
          ?excluded_card_tokens: ::Array[String],
          ?request_options: Lithic::request_opts
        ) -> void

        type parameters =
          Lithic::AuthRules::ConditionalBlockParameters
          | Lithic::AuthRules::VelocityLimitParams
          | Lithic::AuthRules::V2CreateParams::Parameters::MerchantLockParameters

        module Parameters
          extend Lithic::Internal::Type::Union

          type merchant_lock_parameters =
            {
              merchants: ::Array[Lithic::AuthRules::V2CreateParams::Parameters::MerchantLockParameters::Merchant]
            }

          class MerchantLockParameters < Lithic::Internal::Type::BaseModel
            attr_accessor merchants: ::Array[Lithic::AuthRules::V2CreateParams::Parameters::MerchantLockParameters::Merchant]

            def initialize: (
              merchants: ::Array[Lithic::AuthRules::V2CreateParams::Parameters::MerchantLockParameters::Merchant]
            ) -> void

            type merchant =
              { comment: String, descriptor: String, merchant_id: String }

            class Merchant < Lithic::Internal::Type::BaseModel
              attr_reader comment: String?

              def comment=: (String) -> String

              attr_reader descriptor: String?

              def descriptor=: (String) -> String

              attr_reader merchant_id: String?

              def merchant_id=: (String) -> String

              def initialize: (
                ?comment: String,
                ?descriptor: String,
                ?merchant_id: String
              ) -> void
            end
          end

          def self?.variants: -> ::Array[Lithic::Models::AuthRules::V2CreateParams::parameters]
        end

        type type_ = :CONDITIONAL_BLOCK | :VELOCITY_LIMIT | :MERCHANT_LOCK

        module Type
          extend Lithic::Internal::Type::Enum

          CONDITIONAL_BLOCK: :CONDITIONAL_BLOCK
          VELOCITY_LIMIT: :VELOCITY_LIMIT
          MERCHANT_LOCK: :MERCHANT_LOCK

          def self?.values: -> ::Array[Lithic::Models::AuthRules::V2CreateParams::type_]
        end
      end
    end
  end
end
