module Lithic
  module Models
    module AuthRules
      type v2_create_params =
        {
          account_tokens: ::Array[String],
          name: String?,
          parameters: Lithic::Models::AuthRules::V2CreateParams::parameters,
          type: Lithic::Models::AuthRules::V2CreateParams::type_,
          card_tokens: ::Array[String],
          program_level: bool,
          excluded_card_tokens: ::Array[String]
        }
        & Lithic::Internal::Type::request_parameters

      class V2CreateParams < Lithic::Internal::Type::BaseModel
        extend Lithic::Internal::Type::RequestParameters::Converter
        include Lithic::Internal::Type::RequestParameters

        attr_accessor account_tokens: ::Array[String]

        attr_accessor name: String?

        attr_reader parameters: Lithic::Models::AuthRules::V2CreateParams::parameters?

        def parameters=: (
          Lithic::Models::AuthRules::V2CreateParams::parameters
        ) -> Lithic::Models::AuthRules::V2CreateParams::parameters

        attr_reader type: Lithic::Models::AuthRules::V2CreateParams::type_?

        def type=: (
          Lithic::Models::AuthRules::V2CreateParams::type_
        ) -> Lithic::Models::AuthRules::V2CreateParams::type_

        attr_accessor card_tokens: ::Array[String]

        attr_accessor program_level: bool

        attr_reader excluded_card_tokens: ::Array[String]?

        def excluded_card_tokens=: (::Array[String]) -> ::Array[String]

        def initialize: (
          account_tokens: ::Array[String],
          card_tokens: ::Array[String],
          program_level: bool,
          ?name: String?,
          ?parameters: Lithic::Models::AuthRules::V2CreateParams::parameters,
          ?type: Lithic::Models::AuthRules::V2CreateParams::type_,
          ?excluded_card_tokens: ::Array[String],
          ?request_options: Lithic::request_opts
        ) -> void

        def to_hash: -> {
          account_tokens: ::Array[String],
          name: String?,
          parameters: Lithic::Models::AuthRules::V2CreateParams::parameters,
          type: Lithic::Models::AuthRules::V2CreateParams::type_,
          card_tokens: ::Array[String],
          program_level: bool,
          excluded_card_tokens: ::Array[String],
          request_options: Lithic::RequestOptions
        }

        type parameters =
          Lithic::AuthRules::ConditionalBlockParameters
          | Lithic::AuthRules::VelocityLimitParams
          | Lithic::AuthRules::V2CreateParams::Parameters::MerchantLockParameters
          | Lithic::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters

        module Parameters
          extend Lithic::Internal::Type::Union

          type merchant_lock_parameters =
            {
              merchants: ::Array[Lithic::AuthRules::V2CreateParams::Parameters::MerchantLockParameters::Merchant]
            }

          class MerchantLockParameters < Lithic::Internal::Type::BaseModel
            attr_accessor merchants: ::Array[Lithic::AuthRules::V2CreateParams::Parameters::MerchantLockParameters::Merchant]

            def initialize: (
              merchants: ::Array[Lithic::AuthRules::V2CreateParams::Parameters::MerchantLockParameters::Merchant]
            ) -> void

            def to_hash: -> {
              merchants: ::Array[Lithic::AuthRules::V2CreateParams::Parameters::MerchantLockParameters::Merchant]
            }

            type merchant =
              { comment: String, descriptor: String, merchant_id: String }

            class Merchant < Lithic::Internal::Type::BaseModel
              attr_reader comment: String?

              def comment=: (String) -> String

              attr_reader descriptor: String?

              def descriptor=: (String) -> String

              attr_reader merchant_id: String?

              def merchant_id=: (String) -> String

              def initialize: (
                ?comment: String,
                ?descriptor: String,
                ?merchant_id: String
              ) -> void

              def to_hash: -> {
                comment: String,
                descriptor: String,
                merchant_id: String
              }
            end
          end

          type conditional3_ds_action_parameters =
            {
              action: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::action,
              conditions: ::Array[Lithic::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition]
            }

          class Conditional3DSActionParameters < Lithic::Internal::Type::BaseModel
            attr_accessor action: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::action

            attr_accessor conditions: ::Array[Lithic::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition]

            def initialize: (
              action: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::action,
              conditions: ::Array[Lithic::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition]
            ) -> void

            def to_hash: -> {
              action: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::action,
              conditions: ::Array[Lithic::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition]
            }

            type action = :DECLINE | :CHALLENGE

            module Action
              extend Lithic::Internal::Type::Enum

              DECLINE: :DECLINE
              CHALLENGE: :CHALLENGE

              def self?.values: -> ::Array[Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::action]
            end

            type condition =
              {
                attribute: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::attribute,
                operation: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::operation,
                value: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::value
              }

            class Condition < Lithic::Internal::Type::BaseModel
              attr_reader attribute: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::attribute?

              def attribute=: (
                Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::attribute
              ) -> Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::attribute

              attr_reader operation: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::operation?

              def operation=: (
                Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::operation
              ) -> Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::operation

              attr_reader value: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::value?

              def value=: (
                Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::value
              ) -> Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::value

              def initialize: (
                ?attribute: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::attribute,
                ?operation: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::operation,
                ?value: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::value
              ) -> void

              def to_hash: -> {
                attribute: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::attribute,
                operation: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::operation,
                value: Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::value
              }

              type attribute =
                :MCC
                | :COUNTRY
                | :CURRENCY
                | :MERCHANT_ID
                | :DESCRIPTOR
                | :TRANSACTION_AMOUNT
                | :RISK_SCORE
                | :MESSAGE_CATEGORY

              module Attribute
                extend Lithic::Internal::Type::Enum

                MCC: :MCC
                COUNTRY: :COUNTRY
                CURRENCY: :CURRENCY
                MERCHANT_ID: :MERCHANT_ID
                DESCRIPTOR: :DESCRIPTOR
                TRANSACTION_AMOUNT: :TRANSACTION_AMOUNT
                RISK_SCORE: :RISK_SCORE
                MESSAGE_CATEGORY: :MESSAGE_CATEGORY

                def self?.values: -> ::Array[Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::attribute]
              end

              type operation =
                :IS_ONE_OF
                | :IS_NOT_ONE_OF
                | :MATCHES
                | :DOES_NOT_MATCH
                | :IS_GREATER_THAN
                | :IS_LESS_THAN

              module Operation
                extend Lithic::Internal::Type::Enum

                IS_ONE_OF: :IS_ONE_OF
                IS_NOT_ONE_OF: :IS_NOT_ONE_OF
                MATCHES: :MATCHES
                DOES_NOT_MATCH: :DOES_NOT_MATCH
                IS_GREATER_THAN: :IS_GREATER_THAN
                IS_LESS_THAN: :IS_LESS_THAN

                def self?.values: -> ::Array[Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::operation]
              end

              type value = String | Integer | ::Array[String]

              module Value
                extend Lithic::Internal::Type::Union

                def self?.variants: -> ::Array[Lithic::Models::AuthRules::V2CreateParams::Parameters::Conditional3DSActionParameters::Condition::value]

                StringArray: Lithic::Internal::Type::Converter
              end
            end
          end

          def self?.variants: -> ::Array[Lithic::Models::AuthRules::V2CreateParams::parameters]
        end

        type type_ =
          :CONDITIONAL_BLOCK
          | :VELOCITY_LIMIT
          | :MERCHANT_LOCK
          | :CONDITIONAL_3DS_ACTION

        module Type
          extend Lithic::Internal::Type::Enum

          CONDITIONAL_BLOCK: :CONDITIONAL_BLOCK
          VELOCITY_LIMIT: :VELOCITY_LIMIT
          MERCHANT_LOCK: :MERCHANT_LOCK
          CONDITIONAL_3DS_ACTION: :CONDITIONAL_3DS_ACTION

          def self?.values: -> ::Array[Lithic::Models::AuthRules::V2CreateParams::type_]
        end
      end
    end
  end
end
