module Lithic
  module Models
    module AuthRules
      type v2_draft_params =
        { parameters: Lithic::Models::AuthRules::V2DraftParams::parameters? }
        & Lithic::request_parameters

      class V2DraftParams < Lithic::BaseModel
        extend Lithic::RequestParameters::Converter
        include Lithic::RequestParameters

        attr_accessor parameters: Lithic::Models::AuthRules::V2DraftParams::parameters?

        def initialize: (
          ?parameters: Lithic::Models::AuthRules::V2DraftParams::parameters?,
          ?request_options: Lithic::request_opts
        ) -> void

        def to_hash: -> Lithic::Models::AuthRules::v2_draft_params

        type parameters =
          Lithic::Models::AuthRules::ConditionalBlockParameters
          | Lithic::Models::AuthRules::VelocityLimitParams

        class Parameters < Lithic::Union
          def self.variants: -> [Lithic::Models::AuthRules::ConditionalBlockParameters, Lithic::Models::AuthRules::VelocityLimitParams]
        end
      end
    end
  end
end
