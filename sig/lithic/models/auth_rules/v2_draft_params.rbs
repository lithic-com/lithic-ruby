module Lithic
  module Models
    module AuthRules
      type v2_draft_params =
        { parameters: Lithic::Models::AuthRules::V2DraftParams::parameters? }
        & Lithic::Internal::Type::request_parameters

      class V2DraftParams < Lithic::Internal::Type::BaseModel
        extend Lithic::Internal::Type::RequestParameters::Converter
        include Lithic::Internal::Type::RequestParameters

        attr_accessor parameters: Lithic::Models::AuthRules::V2DraftParams::parameters?

        def initialize: (
          ?parameters: Lithic::Models::AuthRules::V2DraftParams::parameters?,
          ?request_options: Lithic::request_opts
        ) -> void

        def to_hash: -> {
          parameters: Lithic::Models::AuthRules::V2DraftParams::parameters?,
          request_options: Lithic::RequestOptions
        }

        type parameters =
          Lithic::AuthRules::ConditionalBlockParameters
          | Lithic::AuthRules::VelocityLimitParams
          | Lithic::AuthRules::MerchantLockParameters
          | Lithic::AuthRules::Conditional3DSActionParameters

        module Parameters
          extend Lithic::Internal::Type::Union

          def self?.variants: -> ::Array[Lithic::Models::AuthRules::V2DraftParams::parameters]
        end
      end
    end
  end
end
