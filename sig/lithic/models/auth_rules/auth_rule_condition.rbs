module Lithic
  module Models
    class AuthRuleCondition = AuthRules::AuthRuleCondition

    module AuthRules
      type auth_rule_condition =
        {
          attribute: Lithic::Models::AuthRules::conditional_attribute,
          operation: Lithic::AuthRules::AuthRuleCondition::operation,
          value: Lithic::AuthRules::AuthRuleCondition::value
        }

      class AuthRuleCondition < Lithic::Internal::Type::BaseModel
        attr_reader attribute: Lithic::Models::AuthRules::conditional_attribute?

        def attribute=: (
          Lithic::Models::AuthRules::conditional_attribute
        ) -> Lithic::Models::AuthRules::conditional_attribute

        attr_reader operation: Lithic::AuthRules::AuthRuleCondition::operation?

        def operation=: (
          Lithic::AuthRules::AuthRuleCondition::operation
        ) -> Lithic::AuthRules::AuthRuleCondition::operation

        attr_reader value: Lithic::AuthRules::AuthRuleCondition::value?

        def value=: (
          Lithic::AuthRules::AuthRuleCondition::value
        ) -> Lithic::AuthRules::AuthRuleCondition::value

        def initialize: (
          ?attribute: Lithic::Models::AuthRules::conditional_attribute,
          ?operation: Lithic::AuthRules::AuthRuleCondition::operation,
          ?value: Lithic::AuthRules::AuthRuleCondition::value
        ) -> void

        type operation =
          :IS_ONE_OF
          | :IS_NOT_ONE_OF
          | :MATCHES
          | :DOES_NOT_MATCH
          | :IS_GREATER_THAN
          | :IS_LESS_THAN

        module Operation
          extend Lithic::Internal::Type::Enum

          IS_ONE_OF: :IS_ONE_OF
          IS_NOT_ONE_OF: :IS_NOT_ONE_OF
          MATCHES: :MATCHES
          DOES_NOT_MATCH: :DOES_NOT_MATCH
          IS_GREATER_THAN: :IS_GREATER_THAN
          IS_LESS_THAN: :IS_LESS_THAN

          def self?.values: -> ::Array[Lithic::AuthRules::AuthRuleCondition::operation]
        end

        type value = String | Integer | ::Array[String]

        module Value
          extend Lithic::Internal::Type::Union

          def self?.variants: -> ::Array[Lithic::AuthRules::AuthRuleCondition::value]

          StringArray: Lithic::Internal::Type::Converter
        end
      end
    end
  end
end
