module Lithic
  module Models
    class AuthRuleCondition = AuthRules::AuthRuleCondition

    module AuthRules
      type auth_rule_condition =
        {
          attribute: Lithic::Models::AuthRules::conditional_attribute,
          operation: Lithic::Models::AuthRules::AuthRuleCondition::operation,
          value: Lithic::Models::AuthRules::AuthRuleCondition::value
        }

      class AuthRuleCondition < Lithic::BaseModel
        attr_reader attribute: Lithic::Models::AuthRules::conditional_attribute?

        def attribute=: (
          Lithic::Models::AuthRules::conditional_attribute
        ) -> Lithic::Models::AuthRules::conditional_attribute

        attr_reader operation: Lithic::Models::AuthRules::AuthRuleCondition::operation?

        def operation=: (
          Lithic::Models::AuthRules::AuthRuleCondition::operation
        ) -> Lithic::Models::AuthRules::AuthRuleCondition::operation

        attr_reader value: Lithic::Models::AuthRules::AuthRuleCondition::value?

        def value=: (
          Lithic::Models::AuthRules::AuthRuleCondition::value
        ) -> Lithic::Models::AuthRules::AuthRuleCondition::value

        def initialize: (
          ?attribute: Lithic::Models::AuthRules::conditional_attribute,
          ?operation: Lithic::Models::AuthRules::AuthRuleCondition::operation,
          ?value: Lithic::Models::AuthRules::AuthRuleCondition::value
        ) -> void

        def to_hash: -> Lithic::Models::AuthRules::auth_rule_condition

        type operation =
          :IS_ONE_OF
          | :IS_NOT_ONE_OF
          | :MATCHES
          | :DOES_NOT_MATCH
          | :IS_GREATER_THAN
          | :IS_LESS_THAN

        module Operation
          extend Lithic::Enum

          IS_ONE_OF: :IS_ONE_OF
          IS_NOT_ONE_OF: :IS_NOT_ONE_OF
          MATCHES: :MATCHES
          DOES_NOT_MATCH: :DOES_NOT_MATCH
          IS_GREATER_THAN: :IS_GREATER_THAN
          IS_LESS_THAN: :IS_LESS_THAN

          def self.values: -> ::Array[Lithic::Models::AuthRules::AuthRuleCondition::operation]
        end

        type value = String | Integer | ::Array[String]

        module Value
          extend Lithic::Union

          type string_array = ::Array[String]

          StringArray: string_array

          def self.variants: -> [String, Integer, ::Array[String]]
        end
      end
    end
  end
end
