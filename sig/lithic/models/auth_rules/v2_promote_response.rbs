module Lithic
  module Models
    module AuthRules
      type v2_promote_response =
        {
          token: String,
          account_tokens: ::Array[String],
          card_tokens: ::Array[String],
          current_version: Lithic::Models::AuthRules::V2PromoteResponse::CurrentVersion?,
          draft_version: Lithic::Models::AuthRules::V2PromoteResponse::DraftVersion?,
          name: String?,
          program_level: bool,
          state: Lithic::Models::AuthRules::V2PromoteResponse::state,
          type: Lithic::Models::AuthRules::V2PromoteResponse::type_,
          excluded_card_tokens: ::Array[String]
        }

      class V2PromoteResponse < Lithic::Internal::Type::BaseModel
        attr_accessor token: String

        attr_accessor account_tokens: ::Array[String]

        attr_accessor card_tokens: ::Array[String]

        attr_accessor current_version: Lithic::Models::AuthRules::V2PromoteResponse::CurrentVersion?

        attr_accessor draft_version: Lithic::Models::AuthRules::V2PromoteResponse::DraftVersion?

        attr_accessor name: String?

        attr_accessor program_level: bool

        attr_accessor state: Lithic::Models::AuthRules::V2PromoteResponse::state

        attr_accessor type: Lithic::Models::AuthRules::V2PromoteResponse::type_

        attr_reader excluded_card_tokens: ::Array[String]?

        def excluded_card_tokens=: (::Array[String]) -> ::Array[String]

        def initialize: (
          token: String,
          account_tokens: ::Array[String],
          card_tokens: ::Array[String],
          current_version: Lithic::Models::AuthRules::V2PromoteResponse::CurrentVersion?,
          draft_version: Lithic::Models::AuthRules::V2PromoteResponse::DraftVersion?,
          name: String?,
          program_level: bool,
          state: Lithic::Models::AuthRules::V2PromoteResponse::state,
          type: Lithic::Models::AuthRules::V2PromoteResponse::type_,
          ?excluded_card_tokens: ::Array[String]
        ) -> void

        type current_version =
          {
            parameters: Lithic::Models::AuthRules::V2PromoteResponse::CurrentVersion::parameters,
            version: Integer
          }

        class CurrentVersion < Lithic::Internal::Type::BaseModel
          attr_accessor parameters: Lithic::Models::AuthRules::V2PromoteResponse::CurrentVersion::parameters

          attr_accessor version: Integer

          def initialize: (
            parameters: Lithic::Models::AuthRules::V2PromoteResponse::CurrentVersion::parameters,
            version: Integer
          ) -> void

          type parameters =
            Lithic::AuthRules::ConditionalBlockParameters
            | Lithic::AuthRules::VelocityLimitParams
            | Lithic::Models::AuthRules::V2PromoteResponse::CurrentVersion::Parameters::MerchantLockParameters

          module Parameters
            extend Lithic::Internal::Type::Union

            type merchant_lock_parameters =
              {
                merchants: ::Array[Lithic::Models::AuthRules::V2PromoteResponse::CurrentVersion::Parameters::MerchantLockParameters::Merchant]
              }

            class MerchantLockParameters < Lithic::Internal::Type::BaseModel
              attr_accessor merchants: ::Array[Lithic::Models::AuthRules::V2PromoteResponse::CurrentVersion::Parameters::MerchantLockParameters::Merchant]

              def initialize: (
                merchants: ::Array[Lithic::Models::AuthRules::V2PromoteResponse::CurrentVersion::Parameters::MerchantLockParameters::Merchant]
              ) -> void

              type merchant =
                { comment: String, descriptor: String, merchant_id: String }

              class Merchant < Lithic::Internal::Type::BaseModel
                attr_reader comment: String?

                def comment=: (String) -> String

                attr_reader descriptor: String?

                def descriptor=: (String) -> String

                attr_reader merchant_id: String?

                def merchant_id=: (String) -> String

                def initialize: (
                  ?comment: String,
                  ?descriptor: String,
                  ?merchant_id: String
                ) -> void
              end
            end

            def self?.variants: -> ::Array[Lithic::Models::AuthRules::V2PromoteResponse::CurrentVersion::parameters]
          end
        end

        type draft_version =
          {
            parameters: Lithic::Models::AuthRules::V2PromoteResponse::DraftVersion::parameters,
            version: Integer
          }

        class DraftVersion < Lithic::Internal::Type::BaseModel
          attr_accessor parameters: Lithic::Models::AuthRules::V2PromoteResponse::DraftVersion::parameters

          attr_accessor version: Integer

          def initialize: (
            parameters: Lithic::Models::AuthRules::V2PromoteResponse::DraftVersion::parameters,
            version: Integer
          ) -> void

          type parameters =
            Lithic::AuthRules::ConditionalBlockParameters
            | Lithic::AuthRules::VelocityLimitParams
            | Lithic::Models::AuthRules::V2PromoteResponse::DraftVersion::Parameters::MerchantLockParameters

          module Parameters
            extend Lithic::Internal::Type::Union

            type merchant_lock_parameters =
              {
                merchants: ::Array[Lithic::Models::AuthRules::V2PromoteResponse::DraftVersion::Parameters::MerchantLockParameters::Merchant]
              }

            class MerchantLockParameters < Lithic::Internal::Type::BaseModel
              attr_accessor merchants: ::Array[Lithic::Models::AuthRules::V2PromoteResponse::DraftVersion::Parameters::MerchantLockParameters::Merchant]

              def initialize: (
                merchants: ::Array[Lithic::Models::AuthRules::V2PromoteResponse::DraftVersion::Parameters::MerchantLockParameters::Merchant]
              ) -> void

              type merchant =
                { comment: String, descriptor: String, merchant_id: String }

              class Merchant < Lithic::Internal::Type::BaseModel
                attr_reader comment: String?

                def comment=: (String) -> String

                attr_reader descriptor: String?

                def descriptor=: (String) -> String

                attr_reader merchant_id: String?

                def merchant_id=: (String) -> String

                def initialize: (
                  ?comment: String,
                  ?descriptor: String,
                  ?merchant_id: String
                ) -> void
              end
            end

            def self?.variants: -> ::Array[Lithic::Models::AuthRules::V2PromoteResponse::DraftVersion::parameters]
          end
        end

        type state = :ACTIVE | :INACTIVE

        module State
          extend Lithic::Internal::Type::Enum

          ACTIVE: :ACTIVE
          INACTIVE: :INACTIVE

          def self?.values: -> ::Array[Lithic::Models::AuthRules::V2PromoteResponse::state]
        end

        type type_ = :CONDITIONAL_BLOCK | :VELOCITY_LIMIT | :MERCHANT_LOCK

        module Type
          extend Lithic::Internal::Type::Enum

          CONDITIONAL_BLOCK: :CONDITIONAL_BLOCK
          VELOCITY_LIMIT: :VELOCITY_LIMIT
          MERCHANT_LOCK: :MERCHANT_LOCK

          def self?.values: -> ::Array[Lithic::Models::AuthRules::V2PromoteResponse::type_]
        end
      end
    end
  end
end
