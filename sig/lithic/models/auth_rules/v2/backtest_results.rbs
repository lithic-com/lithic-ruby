module Lithic
  module Models
    module AuthRules
      module V2
        type backtest_results =
          {
            backtest_token: String,
            results: Lithic::AuthRules::V2::BacktestResults::Results,
            simulation_parameters: Lithic::AuthRules::V2::BacktestResults::SimulationParameters
          }

        class BacktestResults < Lithic::Internal::Type::BaseModel
          attr_accessor backtest_token: String

          attr_accessor results: Lithic::AuthRules::V2::BacktestResults::Results

          attr_accessor simulation_parameters: Lithic::AuthRules::V2::BacktestResults::SimulationParameters

          def initialize: (
            backtest_token: String,
            results: Lithic::AuthRules::V2::BacktestResults::Results,
            simulation_parameters: Lithic::AuthRules::V2::BacktestResults::SimulationParameters
          ) -> void

          def to_hash: -> {
            backtest_token: String,
            results: Lithic::AuthRules::V2::BacktestResults::Results,
            simulation_parameters: Lithic::AuthRules::V2::BacktestResults::SimulationParameters
          }

          type results =
            {
              current_version: Lithic::AuthRules::RuleStats?,
              draft_version: Lithic::AuthRules::RuleStats?
            }

          class Results < Lithic::Internal::Type::BaseModel
            attr_accessor current_version: Lithic::AuthRules::RuleStats?

            attr_accessor draft_version: Lithic::AuthRules::RuleStats?

            def initialize: (
              ?current_version: Lithic::AuthRules::RuleStats?,
              ?draft_version: Lithic::AuthRules::RuleStats?
            ) -> void

            def to_hash: -> {
              current_version: Lithic::AuthRules::RuleStats?,
              draft_version: Lithic::AuthRules::RuleStats?
            }
          end

          type simulation_parameters =
            { auth_rule_token: String, end_: Time, start: Time }

          class SimulationParameters < Lithic::Internal::Type::BaseModel
            attr_reader auth_rule_token: String?

            def auth_rule_token=: (String) -> String

            attr_reader end_: Time?

            def end_=: (Time) -> Time

            attr_reader start: Time?

            def start=: (Time) -> Time

            def initialize: (
              ?auth_rule_token: String,
              ?end_: Time,
              ?start: Time
            ) -> void

            def to_hash: -> { auth_rule_token: String, end_: Time, start: Time }
          end
        end
      end
    end
  end
end
