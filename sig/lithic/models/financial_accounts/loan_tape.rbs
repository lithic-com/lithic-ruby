module Lithic
  module Models
    module FinancialAccounts
      type loan_tape =
        {
          token: String,
          account_standing: Lithic::FinancialAccounts::LoanTape::AccountStanding,
          available_credit: Integer,
          balances: Lithic::FinancialAccounts::LoanTape::Balances,
          created: Time,
          credit_limit: Integer,
          credit_product_token: String,
          date: Date,
          day_totals: Lithic::FinancialAccounts::LoanTape::DayTotals,
          ending_balance: Integer,
          excess_credits: Integer,
          financial_account_token: String,
          interest_details: Lithic::FinancialAccounts::LoanTape::InterestDetails?,
          minimum_payment_balance: Lithic::FinancialAccounts::LoanTape::MinimumPaymentBalance,
          payment_allocation: Lithic::FinancialAccounts::LoanTape::PaymentAllocation,
          period_totals: Lithic::FinancialAccounts::LoanTape::PeriodTotals,
          previous_statement_balance: Lithic::FinancialAccounts::LoanTape::PreviousStatementBalance,
          starting_balance: Integer,
          updated: Time,
          version: Integer,
          ytd_totals: Lithic::FinancialAccounts::LoanTape::YtdTotals,
          tier: String
        }

      class LoanTape < Lithic::Internal::Type::BaseModel
        attr_accessor token: String

        attr_accessor account_standing: Lithic::FinancialAccounts::LoanTape::AccountStanding

        attr_accessor available_credit: Integer

        attr_accessor balances: Lithic::FinancialAccounts::LoanTape::Balances

        attr_accessor created: Time

        attr_accessor credit_limit: Integer

        attr_accessor credit_product_token: String

        attr_accessor date: Date

        attr_accessor day_totals: Lithic::FinancialAccounts::LoanTape::DayTotals

        attr_accessor ending_balance: Integer

        attr_accessor excess_credits: Integer

        attr_accessor financial_account_token: String

        attr_accessor interest_details: Lithic::FinancialAccounts::LoanTape::InterestDetails?

        attr_accessor minimum_payment_balance: Lithic::FinancialAccounts::LoanTape::MinimumPaymentBalance

        attr_accessor payment_allocation: Lithic::FinancialAccounts::LoanTape::PaymentAllocation

        attr_accessor period_totals: Lithic::FinancialAccounts::LoanTape::PeriodTotals

        attr_accessor previous_statement_balance: Lithic::FinancialAccounts::LoanTape::PreviousStatementBalance

        attr_accessor starting_balance: Integer

        attr_accessor updated: Time

        attr_accessor version: Integer

        attr_accessor ytd_totals: Lithic::FinancialAccounts::LoanTape::YtdTotals

        attr_reader tier: String?

        def tier=: (String) -> String

        def initialize: (
          token: String,
          account_standing: Lithic::FinancialAccounts::LoanTape::AccountStanding,
          available_credit: Integer,
          balances: Lithic::FinancialAccounts::LoanTape::Balances,
          created: Time,
          credit_limit: Integer,
          credit_product_token: String,
          date: Date,
          day_totals: Lithic::FinancialAccounts::LoanTape::DayTotals,
          ending_balance: Integer,
          excess_credits: Integer,
          financial_account_token: String,
          interest_details: Lithic::FinancialAccounts::LoanTape::InterestDetails?,
          minimum_payment_balance: Lithic::FinancialAccounts::LoanTape::MinimumPaymentBalance,
          payment_allocation: Lithic::FinancialAccounts::LoanTape::PaymentAllocation,
          period_totals: Lithic::FinancialAccounts::LoanTape::PeriodTotals,
          previous_statement_balance: Lithic::FinancialAccounts::LoanTape::PreviousStatementBalance,
          starting_balance: Integer,
          updated: Time,
          version: Integer,
          ytd_totals: Lithic::FinancialAccounts::LoanTape::YtdTotals,
          ?tier: String
        ) -> void

        def to_hash: -> {
          token: String,
          account_standing: Lithic::FinancialAccounts::LoanTape::AccountStanding,
          available_credit: Integer,
          balances: Lithic::FinancialAccounts::LoanTape::Balances,
          created: Time,
          credit_limit: Integer,
          credit_product_token: String,
          date: Date,
          day_totals: Lithic::FinancialAccounts::LoanTape::DayTotals,
          ending_balance: Integer,
          excess_credits: Integer,
          financial_account_token: String,
          interest_details: Lithic::FinancialAccounts::LoanTape::InterestDetails?,
          minimum_payment_balance: Lithic::FinancialAccounts::LoanTape::MinimumPaymentBalance,
          payment_allocation: Lithic::FinancialAccounts::LoanTape::PaymentAllocation,
          period_totals: Lithic::FinancialAccounts::LoanTape::PeriodTotals,
          previous_statement_balance: Lithic::FinancialAccounts::LoanTape::PreviousStatementBalance,
          starting_balance: Integer,
          updated: Time,
          version: Integer,
          ytd_totals: Lithic::FinancialAccounts::LoanTape::YtdTotals,
          tier: String
        }

        type account_standing =
          {
            consecutive_full_payments_made: Integer,
            consecutive_minimum_payments_made: Integer,
            consecutive_minimum_payments_missed: Integer,
            days_past_due: Integer,
            financial_account_state: Lithic::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState,
            has_grace: bool,
            period_number: Integer,
            period_state: Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::period_state
          }

        class AccountStanding < Lithic::Internal::Type::BaseModel
          attr_accessor consecutive_full_payments_made: Integer

          attr_accessor consecutive_minimum_payments_made: Integer

          attr_accessor consecutive_minimum_payments_missed: Integer

          attr_accessor days_past_due: Integer

          attr_accessor financial_account_state: Lithic::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState

          attr_accessor has_grace: bool

          attr_accessor period_number: Integer

          attr_accessor period_state: Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::period_state

          def initialize: (
            consecutive_full_payments_made: Integer,
            consecutive_minimum_payments_made: Integer,
            consecutive_minimum_payments_missed: Integer,
            days_past_due: Integer,
            financial_account_state: Lithic::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState,
            has_grace: bool,
            period_number: Integer,
            period_state: Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::period_state
          ) -> void

          def to_hash: -> {
            consecutive_full_payments_made: Integer,
            consecutive_minimum_payments_made: Integer,
            consecutive_minimum_payments_missed: Integer,
            days_past_due: Integer,
            financial_account_state: Lithic::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState,
            has_grace: bool,
            period_number: Integer,
            period_state: Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::period_state
          }

          type financial_account_state =
            {
              status: Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState::status,
              substatus: Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState::substatus?
            }

          class FinancialAccountState < Lithic::Internal::Type::BaseModel
            attr_accessor status: Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState::status

            attr_accessor substatus: Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState::substatus?

            def initialize: (
              status: Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState::status,
              ?substatus: Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState::substatus?
            ) -> void

            def to_hash: -> {
              status: Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState::status,
              substatus: Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState::substatus?
            }

            type status = :OPEN | :CLOSED | :SUSPENDED | :PENDING

            module Status
              extend Lithic::Internal::Type::Enum

              OPEN: :OPEN
              CLOSED: :CLOSED
              SUSPENDED: :SUSPENDED
              PENDING: :PENDING

              def self?.values: -> ::Array[Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState::status]
            end

            type substatus =
              :CHARGED_OFF_DELINQUENT
              | :CHARGED_OFF_FRAUD
              | :END_USER_REQUEST
              | :BANK_REQUEST
              | :DELINQUENT

            module Substatus
              extend Lithic::Internal::Type::Enum

              CHARGED_OFF_DELINQUENT: :CHARGED_OFF_DELINQUENT
              CHARGED_OFF_FRAUD: :CHARGED_OFF_FRAUD
              END_USER_REQUEST: :END_USER_REQUEST
              BANK_REQUEST: :BANK_REQUEST
              DELINQUENT: :DELINQUENT

              def self?.values: -> ::Array[Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::FinancialAccountState::substatus]
            end
          end

          type period_state = :STANDARD | :PROMO | :PENALTY

          module PeriodState
            extend Lithic::Internal::Type::Enum

            STANDARD: :STANDARD
            PROMO: :PROMO
            PENALTY: :PENALTY

            def self?.values: -> ::Array[Lithic::Models::FinancialAccounts::LoanTape::AccountStanding::period_state]
          end
        end

        type balances =
          {
            due: Lithic::FinancialAccounts::LoanTape::Balances::Due,
            next_statement_due: Lithic::FinancialAccounts::LoanTape::Balances::NextStatementDue,
            past_due: Lithic::FinancialAccounts::LoanTape::Balances::PastDue,
            past_statements_due: Lithic::FinancialAccounts::LoanTape::Balances::PastStatementsDue
          }

        class Balances < Lithic::Internal::Type::BaseModel
          attr_accessor due: Lithic::FinancialAccounts::LoanTape::Balances::Due

          attr_accessor next_statement_due: Lithic::FinancialAccounts::LoanTape::Balances::NextStatementDue

          attr_accessor past_due: Lithic::FinancialAccounts::LoanTape::Balances::PastDue

          attr_accessor past_statements_due: Lithic::FinancialAccounts::LoanTape::Balances::PastStatementsDue

          def initialize: (
            due: Lithic::FinancialAccounts::LoanTape::Balances::Due,
            next_statement_due: Lithic::FinancialAccounts::LoanTape::Balances::NextStatementDue,
            past_due: Lithic::FinancialAccounts::LoanTape::Balances::PastDue,
            past_statements_due: Lithic::FinancialAccounts::LoanTape::Balances::PastStatementsDue
          ) -> void

          def to_hash: -> {
            due: Lithic::FinancialAccounts::LoanTape::Balances::Due,
            next_statement_due: Lithic::FinancialAccounts::LoanTape::Balances::NextStatementDue,
            past_due: Lithic::FinancialAccounts::LoanTape::Balances::PastDue,
            past_statements_due: Lithic::FinancialAccounts::LoanTape::Balances::PastStatementsDue
          }

          type due = { fees: Integer, interest: Integer, principal: Integer }

          class Due < Lithic::Internal::Type::BaseModel
            attr_accessor fees: Integer

            attr_accessor interest: Integer

            attr_accessor principal: Integer

            def initialize: (
              fees: Integer,
              interest: Integer,
              principal: Integer
            ) -> void

            def to_hash: -> {
              fees: Integer,
              interest: Integer,
              principal: Integer
            }
          end

          type next_statement_due =
            { fees: Integer, interest: Integer, principal: Integer }

          class NextStatementDue < Lithic::Internal::Type::BaseModel
            attr_accessor fees: Integer

            attr_accessor interest: Integer

            attr_accessor principal: Integer

            def initialize: (
              fees: Integer,
              interest: Integer,
              principal: Integer
            ) -> void

            def to_hash: -> {
              fees: Integer,
              interest: Integer,
              principal: Integer
            }
          end

          type past_due =
            { fees: Integer, interest: Integer, principal: Integer }

          class PastDue < Lithic::Internal::Type::BaseModel
            attr_accessor fees: Integer

            attr_accessor interest: Integer

            attr_accessor principal: Integer

            def initialize: (
              fees: Integer,
              interest: Integer,
              principal: Integer
            ) -> void

            def to_hash: -> {
              fees: Integer,
              interest: Integer,
              principal: Integer
            }
          end

          type past_statements_due =
            { fees: Integer, interest: Integer, principal: Integer }

          class PastStatementsDue < Lithic::Internal::Type::BaseModel
            attr_accessor fees: Integer

            attr_accessor interest: Integer

            attr_accessor principal: Integer

            def initialize: (
              fees: Integer,
              interest: Integer,
              principal: Integer
            ) -> void

            def to_hash: -> {
              fees: Integer,
              interest: Integer,
              principal: Integer
            }
          end
        end

        type day_totals =
          {
            balance_transfers: Integer,
            cash_advances: Integer,
            credits: Integer,
            fees: Integer,
            interest: Integer,
            payments: Integer,
            purchases: Integer
          }

        class DayTotals < Lithic::Internal::Type::BaseModel
          attr_accessor balance_transfers: Integer

          attr_accessor cash_advances: Integer

          attr_accessor credits: Integer

          attr_accessor fees: Integer

          attr_accessor interest: Integer

          attr_accessor payments: Integer

          attr_accessor purchases: Integer

          def initialize: (
            balance_transfers: Integer,
            cash_advances: Integer,
            credits: Integer,
            fees: Integer,
            interest: Integer,
            payments: Integer,
            purchases: Integer
          ) -> void

          def to_hash: -> {
            balance_transfers: Integer,
            cash_advances: Integer,
            credits: Integer,
            fees: Integer,
            interest: Integer,
            payments: Integer,
            purchases: Integer
          }
        end

        type interest_details =
          {
            actual_interest_charged: Integer?,
            daily_balance_amounts: Lithic::FinancialAccounts::LoanTape::InterestDetails::DailyBalanceAmounts,
            effective_apr: Lithic::FinancialAccounts::LoanTape::InterestDetails::EffectiveApr,
            interest_calculation_method: Lithic::Models::FinancialAccounts::LoanTape::InterestDetails::interest_calculation_method,
            interest_for_period: Lithic::FinancialAccounts::LoanTape::InterestDetails::InterestForPeriod,
            prime_rate: String?,
            minimum_interest_charged: Integer?
          }

        class InterestDetails < Lithic::Internal::Type::BaseModel
          attr_accessor actual_interest_charged: Integer?

          attr_accessor daily_balance_amounts: Lithic::FinancialAccounts::LoanTape::InterestDetails::DailyBalanceAmounts

          attr_accessor effective_apr: Lithic::FinancialAccounts::LoanTape::InterestDetails::EffectiveApr

          attr_accessor interest_calculation_method: Lithic::Models::FinancialAccounts::LoanTape::InterestDetails::interest_calculation_method

          attr_accessor interest_for_period: Lithic::FinancialAccounts::LoanTape::InterestDetails::InterestForPeriod

          attr_accessor prime_rate: String?

          attr_accessor minimum_interest_charged: Integer?

          def initialize: (
            actual_interest_charged: Integer?,
            daily_balance_amounts: Lithic::FinancialAccounts::LoanTape::InterestDetails::DailyBalanceAmounts,
            effective_apr: Lithic::FinancialAccounts::LoanTape::InterestDetails::EffectiveApr,
            interest_calculation_method: Lithic::Models::FinancialAccounts::LoanTape::InterestDetails::interest_calculation_method,
            interest_for_period: Lithic::FinancialAccounts::LoanTape::InterestDetails::InterestForPeriod,
            prime_rate: String?,
            ?minimum_interest_charged: Integer?
          ) -> void

          def to_hash: -> {
            actual_interest_charged: Integer?,
            daily_balance_amounts: Lithic::FinancialAccounts::LoanTape::InterestDetails::DailyBalanceAmounts,
            effective_apr: Lithic::FinancialAccounts::LoanTape::InterestDetails::EffectiveApr,
            interest_calculation_method: Lithic::Models::FinancialAccounts::LoanTape::InterestDetails::interest_calculation_method,
            interest_for_period: Lithic::FinancialAccounts::LoanTape::InterestDetails::InterestForPeriod,
            prime_rate: String?,
            minimum_interest_charged: Integer?
          }

          type daily_balance_amounts =
            {
              balance_transfers: String,
              cash_advances: String,
              purchases: String
            }

          class DailyBalanceAmounts < Lithic::Internal::Type::BaseModel
            attr_accessor balance_transfers: String

            attr_accessor cash_advances: String

            attr_accessor purchases: String

            def initialize: (
              balance_transfers: String,
              cash_advances: String,
              purchases: String
            ) -> void

            def to_hash: -> {
              balance_transfers: String,
              cash_advances: String,
              purchases: String
            }
          end

          type effective_apr =
            {
              balance_transfers: String,
              cash_advances: String,
              purchases: String
            }

          class EffectiveApr < Lithic::Internal::Type::BaseModel
            attr_accessor balance_transfers: String

            attr_accessor cash_advances: String

            attr_accessor purchases: String

            def initialize: (
              balance_transfers: String,
              cash_advances: String,
              purchases: String
            ) -> void

            def to_hash: -> {
              balance_transfers: String,
              cash_advances: String,
              purchases: String
            }
          end

          type interest_calculation_method = :DAILY | :AVERAGE_DAILY

          module InterestCalculationMethod
            extend Lithic::Internal::Type::Enum

            DAILY: :DAILY
            AVERAGE_DAILY: :AVERAGE_DAILY

            def self?.values: -> ::Array[Lithic::Models::FinancialAccounts::LoanTape::InterestDetails::interest_calculation_method]
          end

          type interest_for_period =
            {
              balance_transfers: String,
              cash_advances: String,
              purchases: String
            }

          class InterestForPeriod < Lithic::Internal::Type::BaseModel
            attr_accessor balance_transfers: String

            attr_accessor cash_advances: String

            attr_accessor purchases: String

            def initialize: (
              balance_transfers: String,
              cash_advances: String,
              purchases: String
            ) -> void

            def to_hash: -> {
              balance_transfers: String,
              cash_advances: String,
              purchases: String
            }
          end
        end

        type minimum_payment_balance = { amount: Integer, remaining: Integer }

        class MinimumPaymentBalance < Lithic::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor remaining: Integer

          def initialize: (amount: Integer, remaining: Integer) -> void

          def to_hash: -> { amount: Integer, remaining: Integer }
        end

        type payment_allocation =
          { fees: Integer, interest: Integer, principal: Integer }

        class PaymentAllocation < Lithic::Internal::Type::BaseModel
          attr_accessor fees: Integer

          attr_accessor interest: Integer

          attr_accessor principal: Integer

          def initialize: (
            fees: Integer,
            interest: Integer,
            principal: Integer
          ) -> void

          def to_hash: -> {
            fees: Integer,
            interest: Integer,
            principal: Integer
          }
        end

        type period_totals =
          {
            balance_transfers: Integer,
            cash_advances: Integer,
            credits: Integer,
            fees: Integer,
            interest: Integer,
            payments: Integer,
            purchases: Integer
          }

        class PeriodTotals < Lithic::Internal::Type::BaseModel
          attr_accessor balance_transfers: Integer

          attr_accessor cash_advances: Integer

          attr_accessor credits: Integer

          attr_accessor fees: Integer

          attr_accessor interest: Integer

          attr_accessor payments: Integer

          attr_accessor purchases: Integer

          def initialize: (
            balance_transfers: Integer,
            cash_advances: Integer,
            credits: Integer,
            fees: Integer,
            interest: Integer,
            payments: Integer,
            purchases: Integer
          ) -> void

          def to_hash: -> {
            balance_transfers: Integer,
            cash_advances: Integer,
            credits: Integer,
            fees: Integer,
            interest: Integer,
            payments: Integer,
            purchases: Integer
          }
        end

        type previous_statement_balance =
          { amount: Integer, remaining: Integer }

        class PreviousStatementBalance < Lithic::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor remaining: Integer

          def initialize: (amount: Integer, remaining: Integer) -> void

          def to_hash: -> { amount: Integer, remaining: Integer }
        end

        type ytd_totals =
          {
            balance_transfers: Integer,
            cash_advances: Integer,
            credits: Integer,
            fees: Integer,
            interest: Integer,
            payments: Integer,
            purchases: Integer
          }

        class YtdTotals < Lithic::Internal::Type::BaseModel
          attr_accessor balance_transfers: Integer

          attr_accessor cash_advances: Integer

          attr_accessor credits: Integer

          attr_accessor fees: Integer

          attr_accessor interest: Integer

          attr_accessor payments: Integer

          attr_accessor purchases: Integer

          def initialize: (
            balance_transfers: Integer,
            cash_advances: Integer,
            credits: Integer,
            fees: Integer,
            interest: Integer,
            payments: Integer,
            purchases: Integer
          ) -> void

          def to_hash: -> {
            balance_transfers: Integer,
            cash_advances: Integer,
            credits: Integer,
            fees: Integer,
            interest: Integer,
            payments: Integer,
            purchases: Integer
          }
        end
      end
    end
  end
end
