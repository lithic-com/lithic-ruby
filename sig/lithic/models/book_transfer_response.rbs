module Lithic
  module Models
    type book_transfer_response =
      {
        token: String,
        category: Lithic::Models::BookTransferResponse::category,
        created: Time,
        currency: String,
        events: ::Array[Lithic::BookTransferResponse::Event],
        external_id: String?,
        external_resource: Lithic::ExternalResource?,
        from_financial_account_token: String,
        pending_amount: Integer,
        result: Lithic::Models::BookTransferResponse::result,
        settled_amount: Integer,
        status: Lithic::Models::BookTransferResponse::status,
        to_financial_account_token: String,
        transaction_series: Lithic::BookTransferResponse::TransactionSeries?,
        updated: Time
      }

    class BookTransferResponse < Lithic::Internal::Type::BaseModel
      attr_accessor token: String

      attr_accessor category: Lithic::Models::BookTransferResponse::category

      attr_accessor created: Time

      attr_accessor currency: String

      attr_accessor events: ::Array[Lithic::BookTransferResponse::Event]

      attr_accessor external_id: String?

      attr_accessor external_resource: Lithic::ExternalResource?

      attr_accessor from_financial_account_token: String

      attr_accessor pending_amount: Integer

      attr_accessor result: Lithic::Models::BookTransferResponse::result

      attr_accessor settled_amount: Integer

      attr_accessor status: Lithic::Models::BookTransferResponse::status

      attr_accessor to_financial_account_token: String

      attr_accessor transaction_series: Lithic::BookTransferResponse::TransactionSeries?

      attr_accessor updated: Time

      def initialize: (
        token: String,
        category: Lithic::Models::BookTransferResponse::category,
        created: Time,
        currency: String,
        events: ::Array[Lithic::BookTransferResponse::Event],
        external_id: String?,
        external_resource: Lithic::ExternalResource?,
        from_financial_account_token: String,
        pending_amount: Integer,
        result: Lithic::Models::BookTransferResponse::result,
        settled_amount: Integer,
        status: Lithic::Models::BookTransferResponse::status,
        to_financial_account_token: String,
        transaction_series: Lithic::BookTransferResponse::TransactionSeries?,
        updated: Time
      ) -> void

      def to_hash: -> {
        token: String,
        category: Lithic::Models::BookTransferResponse::category,
        created: Time,
        currency: String,
        events: ::Array[Lithic::BookTransferResponse::Event],
        external_id: String?,
        external_resource: Lithic::ExternalResource?,
        from_financial_account_token: String,
        pending_amount: Integer,
        result: Lithic::Models::BookTransferResponse::result,
        settled_amount: Integer,
        status: Lithic::Models::BookTransferResponse::status,
        to_financial_account_token: String,
        transaction_series: Lithic::BookTransferResponse::TransactionSeries?,
        updated: Time
      }

      type category =
        :ADJUSTMENT
        | :BALANCE_OR_FUNDING
        | :DERECOGNITION
        | :DISPUTE
        | :FEE
        | :REWARD
        | :TRANSFER

      module Category
        extend Lithic::Internal::Type::Enum

        ADJUSTMENT: :ADJUSTMENT
        BALANCE_OR_FUNDING: :BALANCE_OR_FUNDING
        DERECOGNITION: :DERECOGNITION
        DISPUTE: :DISPUTE
        FEE: :FEE
        REWARD: :REWARD
        TRANSFER: :TRANSFER

        def self?.values: -> ::Array[Lithic::Models::BookTransferResponse::category]
      end

      type event =
        {
          token: String,
          amount: Integer,
          created: Time,
          detailed_results: Lithic::Models::BookTransferResponse::Event::detailed_results,
          memo: String,
          result: Lithic::Models::BookTransferResponse::Event::result,
          subtype: String,
          type: Lithic::Models::BookTransferResponse::Event::type_
        }

      class Event < Lithic::Internal::Type::BaseModel
        attr_accessor token: String

        attr_accessor amount: Integer

        attr_accessor created: Time

        attr_accessor detailed_results: Lithic::Models::BookTransferResponse::Event::detailed_results

        attr_accessor memo: String

        attr_accessor result: Lithic::Models::BookTransferResponse::Event::result

        attr_accessor subtype: String

        attr_accessor type: Lithic::Models::BookTransferResponse::Event::type_

        def initialize: (
          token: String,
          amount: Integer,
          created: Time,
          detailed_results: Lithic::Models::BookTransferResponse::Event::detailed_results,
          memo: String,
          result: Lithic::Models::BookTransferResponse::Event::result,
          subtype: String,
          type: Lithic::Models::BookTransferResponse::Event::type_
        ) -> void

        def to_hash: -> {
          token: String,
          amount: Integer,
          created: Time,
          detailed_results: Lithic::Models::BookTransferResponse::Event::detailed_results,
          memo: String,
          result: Lithic::Models::BookTransferResponse::Event::result,
          subtype: String,
          type: Lithic::Models::BookTransferResponse::Event::type_
        }

        type detailed_results = :APPROVED | :FUNDS_INSUFFICIENT

        module DetailedResults
          extend Lithic::Internal::Type::Enum

          APPROVED: :APPROVED
          FUNDS_INSUFFICIENT: :FUNDS_INSUFFICIENT

          def self?.values: -> ::Array[Lithic::Models::BookTransferResponse::Event::detailed_results]
        end

        type result = :APPROVED | :DECLINED

        module Result
          extend Lithic::Internal::Type::Enum

          APPROVED: :APPROVED
          DECLINED: :DECLINED

          def self?.values: -> ::Array[Lithic::Models::BookTransferResponse::Event::result]
        end

        type type_ =
          :ATM_WITHDRAWAL
          | :ATM_DECLINE
          | :INTERNATIONAL_ATM_WITHDRAWAL
          | :INACTIVITY
          | :STATEMENT
          | :MONTHLY
          | :QUARTERLY
          | :ANNUAL
          | :CUSTOMER_SERVICE
          | :ACCOUNT_MAINTENANCE
          | :ACCOUNT_ACTIVATION
          | :ACCOUNT_CLOSURE
          | :CARD_REPLACEMENT
          | :CARD_DELIVERY
          | :CARD_CREATE
          | :CURRENCY_CONVERSION
          | :INTEREST
          | :LATE_PAYMENT
          | :BILL_PAYMENT
          | :CASH_BACK
          | :ACCOUNT_TO_ACCOUNT
          | :CARD_TO_CARD
          | :DISBURSE
          | :BILLING_ERROR
          | :LOSS_WRITE_OFF
          | :EXPIRED_CARD
          | :EARLY_DERECOGNITION
          | :ESCHEATMENT
          | :INACTIVITY_FEE_DOWN
          | :PROVISIONAL_CREDIT
          | :DISPUTE_WON
          | :SERVICE
          | :TRANSFER

        module Type
          extend Lithic::Internal::Type::Enum

          ATM_WITHDRAWAL: :ATM_WITHDRAWAL
          ATM_DECLINE: :ATM_DECLINE
          INTERNATIONAL_ATM_WITHDRAWAL: :INTERNATIONAL_ATM_WITHDRAWAL
          INACTIVITY: :INACTIVITY
          STATEMENT: :STATEMENT
          MONTHLY: :MONTHLY
          QUARTERLY: :QUARTERLY
          ANNUAL: :ANNUAL
          CUSTOMER_SERVICE: :CUSTOMER_SERVICE
          ACCOUNT_MAINTENANCE: :ACCOUNT_MAINTENANCE
          ACCOUNT_ACTIVATION: :ACCOUNT_ACTIVATION
          ACCOUNT_CLOSURE: :ACCOUNT_CLOSURE
          CARD_REPLACEMENT: :CARD_REPLACEMENT
          CARD_DELIVERY: :CARD_DELIVERY
          CARD_CREATE: :CARD_CREATE
          CURRENCY_CONVERSION: :CURRENCY_CONVERSION
          INTEREST: :INTEREST
          LATE_PAYMENT: :LATE_PAYMENT
          BILL_PAYMENT: :BILL_PAYMENT
          CASH_BACK: :CASH_BACK
          ACCOUNT_TO_ACCOUNT: :ACCOUNT_TO_ACCOUNT
          CARD_TO_CARD: :CARD_TO_CARD
          DISBURSE: :DISBURSE
          BILLING_ERROR: :BILLING_ERROR
          LOSS_WRITE_OFF: :LOSS_WRITE_OFF
          EXPIRED_CARD: :EXPIRED_CARD
          EARLY_DERECOGNITION: :EARLY_DERECOGNITION
          ESCHEATMENT: :ESCHEATMENT
          INACTIVITY_FEE_DOWN: :INACTIVITY_FEE_DOWN
          PROVISIONAL_CREDIT: :PROVISIONAL_CREDIT
          DISPUTE_WON: :DISPUTE_WON
          SERVICE: :SERVICE
          TRANSFER: :TRANSFER

          def self?.values: -> ::Array[Lithic::Models::BookTransferResponse::Event::type_]
        end
      end

      type result = :APPROVED | :DECLINED

      module Result
        extend Lithic::Internal::Type::Enum

        APPROVED: :APPROVED
        DECLINED: :DECLINED

        def self?.values: -> ::Array[Lithic::Models::BookTransferResponse::result]
      end

      type status = :DECLINED | :REVERSED | :SETTLED

      module Status
        extend Lithic::Internal::Type::Enum

        DECLINED: :DECLINED
        REVERSED: :REVERSED
        SETTLED: :SETTLED

        def self?.values: -> ::Array[Lithic::Models::BookTransferResponse::status]
      end

      type transaction_series =
        {
          related_transaction_event_token: String?,
          related_transaction_token: String?,
          type: String
        }

      class TransactionSeries < Lithic::Internal::Type::BaseModel
        attr_accessor related_transaction_event_token: String?

        attr_accessor related_transaction_token: String?

        attr_accessor type: String

        def initialize: (
          related_transaction_event_token: String?,
          related_transaction_token: String?,
          type: String
        ) -> void

        def to_hash: -> {
          related_transaction_event_token: String?,
          related_transaction_token: String?,
          type: String
        }
      end
    end
  end
end
