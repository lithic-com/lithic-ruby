module Lithic
  module Models
    type financial_account_create_params =
      {
        nickname: String,
        type: Lithic::Models::FinancialAccountCreateParams::type_,
        account_token: String,
        is_for_benefit_of: bool,
        idempotency_key: String
      }
      & Lithic::request_parameters

    class FinancialAccountCreateParams < Lithic::BaseModel
      extend Lithic::Type::RequestParameters::Converter
      include Lithic::RequestParameters

      attr_accessor nickname: String

      attr_accessor type: Lithic::Models::FinancialAccountCreateParams::type_

      attr_reader account_token: String?

      def account_token=: (String) -> String

      attr_reader is_for_benefit_of: bool?

      def is_for_benefit_of=: (bool) -> bool

      attr_reader idempotency_key: String?

      def idempotency_key=: (String) -> String

      def initialize: (
        nickname: String,
        type: Lithic::Models::FinancialAccountCreateParams::type_,
        ?account_token: String,
        ?is_for_benefit_of: bool,
        ?idempotency_key: String,
        ?request_options: Lithic::request_opts
      ) -> void

      def to_hash: -> Lithic::Models::financial_account_create_params

      type type_ = :OPERATING

      module Type
        extend Lithic::Enum

        OPERATING: :OPERATING

        def self?.values: -> ::Array[Lithic::Models::FinancialAccountCreateParams::type_]
      end
    end
  end
end
