module Lithic
  module Models
    module ThreeDS
      type authentication_simulate_params =
        {
          merchant: Lithic::ThreeDS::AuthenticationSimulateParams::Merchant,
          pan: String,
          transaction: Lithic::ThreeDS::AuthenticationSimulateParams::Transaction,
          card_expiry_check: Lithic::Models::ThreeDS::AuthenticationSimulateParams::card_expiry_check
        }
        & Lithic::Internal::Type::request_parameters

      class AuthenticationSimulateParams < Lithic::Internal::Type::BaseModel
        extend Lithic::Internal::Type::RequestParameters::Converter
        include Lithic::Internal::Type::RequestParameters

        attr_accessor merchant: Lithic::ThreeDS::AuthenticationSimulateParams::Merchant

        attr_accessor pan: String

        attr_accessor transaction: Lithic::ThreeDS::AuthenticationSimulateParams::Transaction

        attr_reader card_expiry_check: Lithic::Models::ThreeDS::AuthenticationSimulateParams::card_expiry_check?

        def card_expiry_check=: (
          Lithic::Models::ThreeDS::AuthenticationSimulateParams::card_expiry_check
        ) -> Lithic::Models::ThreeDS::AuthenticationSimulateParams::card_expiry_check

        def initialize: (
          merchant: Lithic::ThreeDS::AuthenticationSimulateParams::Merchant,
          pan: String,
          transaction: Lithic::ThreeDS::AuthenticationSimulateParams::Transaction,
          ?card_expiry_check: Lithic::Models::ThreeDS::AuthenticationSimulateParams::card_expiry_check,
          ?request_options: Lithic::request_opts
        ) -> void

        type merchant =
          { id: String, country: String, mcc: String, name: String }

        class Merchant < Lithic::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor country: String

          attr_accessor mcc: String

          attr_accessor name: String

          def initialize: (
            id: String,
            country: String,
            mcc: String,
            name: String
          ) -> void
        end

        type transaction = { amount: Integer, currency: String }

        class Transaction < Lithic::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor currency: String

          def initialize: (amount: Integer, currency: String) -> void
        end

        type card_expiry_check = :MATCH | :MISMATCH | :NOT_PRESENT

        module CardExpiryCheck
          extend Lithic::Internal::Type::Enum

          MATCH: :MATCH
          MISMATCH: :MISMATCH
          NOT_PRESENT: :NOT_PRESENT

          def self?.values: -> ::Array[Lithic::Models::ThreeDS::AuthenticationSimulateParams::card_expiry_check]
        end
      end
    end
  end
end
