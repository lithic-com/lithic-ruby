module Lithic
  module Models
    type kyb =
      {
        beneficial_owner_individuals: ::Array[Lithic::KYB::BeneficialOwnerIndividual],
        business_entity: Lithic::KYB::BusinessEntity,
        control_person: Lithic::KYB::ControlPerson,
        nature_of_business: String,
        tos_timestamp: String,
        workflow: Lithic::Models::KYB::workflow,
        beneficial_owner_entities: ::Array[Lithic::KYB::BeneficialOwnerEntity],
        external_id: String,
        kyb_passed_timestamp: String,
        website_url: String
      }

    class KYB < Lithic::Internal::Type::BaseModel
      attr_accessor beneficial_owner_individuals: ::Array[Lithic::KYB::BeneficialOwnerIndividual]

      attr_accessor business_entity: Lithic::KYB::BusinessEntity

      attr_accessor control_person: Lithic::KYB::ControlPerson

      attr_accessor nature_of_business: String

      attr_accessor tos_timestamp: String

      attr_accessor workflow: Lithic::Models::KYB::workflow

      attr_reader beneficial_owner_entities: ::Array[Lithic::KYB::BeneficialOwnerEntity]?

      def beneficial_owner_entities=: (
        ::Array[Lithic::KYB::BeneficialOwnerEntity]
      ) -> ::Array[Lithic::KYB::BeneficialOwnerEntity]

      attr_reader external_id: String?

      def external_id=: (String) -> String

      attr_reader kyb_passed_timestamp: String?

      def kyb_passed_timestamp=: (String) -> String

      attr_reader website_url: String?

      def website_url=: (String) -> String

      def initialize: (
        beneficial_owner_individuals: ::Array[Lithic::KYB::BeneficialOwnerIndividual],
        business_entity: Lithic::KYB::BusinessEntity,
        control_person: Lithic::KYB::ControlPerson,
        nature_of_business: String,
        tos_timestamp: String,
        workflow: Lithic::Models::KYB::workflow,
        ?beneficial_owner_entities: ::Array[Lithic::KYB::BeneficialOwnerEntity],
        ?external_id: String,
        ?kyb_passed_timestamp: String,
        ?website_url: String
      ) -> void

      def to_hash: -> {
        beneficial_owner_individuals: ::Array[Lithic::KYB::BeneficialOwnerIndividual],
        business_entity: Lithic::KYB::BusinessEntity,
        control_person: Lithic::KYB::ControlPerson,
        nature_of_business: String,
        tos_timestamp: String,
        workflow: Lithic::Models::KYB::workflow,
        beneficial_owner_entities: ::Array[Lithic::KYB::BeneficialOwnerEntity],
        external_id: String,
        kyb_passed_timestamp: String,
        website_url: String
      }

      type beneficial_owner_individual =
        {
          address: Lithic::Address,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          phone_number: String
        }

      class BeneficialOwnerIndividual < Lithic::Internal::Type::BaseModel
        attr_accessor address: Lithic::Address

        attr_accessor dob: String

        attr_accessor email: String

        attr_accessor first_name: String

        attr_accessor government_id: String

        attr_accessor last_name: String

        attr_reader phone_number: String?

        def phone_number=: (String) -> String

        def initialize: (
          address: Lithic::Address,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          ?phone_number: String
        ) -> void

        def to_hash: -> {
          address: Lithic::Address,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          phone_number: String
        }
      end

      type business_entity =
        {
          address: Lithic::Address,
          government_id: String,
          legal_business_name: String,
          phone_numbers: ::Array[String],
          dba_business_name: String,
          parent_company: String
        }

      class BusinessEntity < Lithic::Internal::Type::BaseModel
        attr_accessor address: Lithic::Address

        attr_accessor government_id: String

        attr_accessor legal_business_name: String

        attr_accessor phone_numbers: ::Array[String]

        attr_reader dba_business_name: String?

        def dba_business_name=: (String) -> String

        attr_reader parent_company: String?

        def parent_company=: (String) -> String

        def initialize: (
          address: Lithic::Address,
          government_id: String,
          legal_business_name: String,
          phone_numbers: ::Array[String],
          ?dba_business_name: String,
          ?parent_company: String
        ) -> void

        def to_hash: -> {
          address: Lithic::Address,
          government_id: String,
          legal_business_name: String,
          phone_numbers: ::Array[String],
          dba_business_name: String,
          parent_company: String
        }
      end

      type control_person =
        {
          address: Lithic::Address,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          phone_number: String
        }

      class ControlPerson < Lithic::Internal::Type::BaseModel
        attr_accessor address: Lithic::Address

        attr_accessor dob: String

        attr_accessor email: String

        attr_accessor first_name: String

        attr_accessor government_id: String

        attr_accessor last_name: String

        attr_reader phone_number: String?

        def phone_number=: (String) -> String

        def initialize: (
          address: Lithic::Address,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          ?phone_number: String
        ) -> void

        def to_hash: -> {
          address: Lithic::Address,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          phone_number: String
        }
      end

      type workflow = :KYB_BASIC | :KYB_BYO

      module Workflow
        extend Lithic::Internal::Type::Enum

        KYB_BASIC: :KYB_BASIC
        KYB_BYO: :KYB_BYO

        def self?.values: -> ::Array[Lithic::Models::KYB::workflow]
      end

      type beneficial_owner_entity =
        {
          address: Lithic::Address,
          government_id: String,
          legal_business_name: String,
          phone_numbers: ::Array[String],
          dba_business_name: String,
          parent_company: String
        }

      class BeneficialOwnerEntity < Lithic::Internal::Type::BaseModel
        attr_accessor address: Lithic::Address

        attr_accessor government_id: String

        attr_accessor legal_business_name: String

        attr_accessor phone_numbers: ::Array[String]

        attr_reader dba_business_name: String?

        def dba_business_name=: (String) -> String

        attr_reader parent_company: String?

        def parent_company=: (String) -> String

        def initialize: (
          address: Lithic::Address,
          government_id: String,
          legal_business_name: String,
          phone_numbers: ::Array[String],
          ?dba_business_name: String,
          ?parent_company: String
        ) -> void

        def to_hash: -> {
          address: Lithic::Address,
          government_id: String,
          legal_business_name: String,
          phone_numbers: ::Array[String],
          dba_business_name: String,
          parent_company: String
        }
      end
    end
  end
end
