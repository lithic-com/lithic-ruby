module Lithic
  module Models
    type aggregate_balance =
      {
        available_amount: Integer,
        created: Time,
        currency: String,
        financial_account_type: Lithic::Models::AggregateBalance::financial_account_type,
        last_financial_account_token: String,
        last_transaction_event_token: String,
        last_transaction_token: String,
        pending_amount: Integer,
        total_amount: Integer,
        updated: Time
      }

    class AggregateBalance < Lithic::BaseModel
      attr_accessor available_amount: Integer

      attr_accessor created: Time

      attr_accessor currency: String

      attr_accessor financial_account_type: Lithic::Models::AggregateBalance::financial_account_type

      attr_accessor last_financial_account_token: String

      attr_accessor last_transaction_event_token: String

      attr_accessor last_transaction_token: String

      attr_accessor pending_amount: Integer

      attr_accessor total_amount: Integer

      attr_accessor updated: Time

      def initialize: (
        available_amount: Integer,
        created: Time,
        currency: String,
        financial_account_type: Lithic::Models::AggregateBalance::financial_account_type,
        last_financial_account_token: String,
        last_transaction_event_token: String,
        last_transaction_token: String,
        pending_amount: Integer,
        total_amount: Integer,
        updated: Time
      ) -> void

      def to_hash: -> Lithic::Models::aggregate_balance

      type financial_account_type = :ISSUING | :OPERATING | :RESERVE

      module FinancialAccountType
        extend Lithic::Enum

        ISSUING: :ISSUING
        OPERATING: :OPERATING
        RESERVE: :RESERVE

        def self?.values: -> ::Array[Lithic::Models::AggregateBalance::financial_account_type]
      end
    end
  end
end
