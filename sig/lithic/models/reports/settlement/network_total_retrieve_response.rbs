module Lithic
  module Models
    module Reports
      module Settlement
        type network_total_retrieve_response =
          {
            token: String,
            amounts: Lithic::Models::Reports::Settlement::NetworkTotalRetrieveResponse::Amounts,
            created: Time,
            currency: String,
            institution_id: String,
            is_complete: bool,
            network: Lithic::Models::Reports::Settlement::NetworkTotalRetrieveResponse::network,
            report_date: Date,
            settlement_institution_id: String,
            settlement_service: String,
            updated: Time,
            cycle: Integer
          }

        class NetworkTotalRetrieveResponse < Lithic::Internal::Type::BaseModel
          attr_accessor token: String

          attr_accessor amounts: Lithic::Models::Reports::Settlement::NetworkTotalRetrieveResponse::Amounts

          attr_accessor created: Time

          attr_accessor currency: String

          attr_accessor institution_id: String

          attr_accessor is_complete: bool

          attr_accessor network: Lithic::Models::Reports::Settlement::NetworkTotalRetrieveResponse::network

          attr_accessor report_date: Date

          attr_accessor settlement_institution_id: String

          attr_accessor settlement_service: String

          attr_accessor updated: Time

          attr_reader cycle: Integer?

          def cycle=: (Integer) -> Integer

          def initialize: (
            token: String,
            amounts: Lithic::Models::Reports::Settlement::NetworkTotalRetrieveResponse::Amounts,
            created: Time,
            currency: String,
            institution_id: String,
            is_complete: bool,
            network: Lithic::Models::Reports::Settlement::NetworkTotalRetrieveResponse::network,
            report_date: Date,
            settlement_institution_id: String,
            settlement_service: String,
            updated: Time,
            ?cycle: Integer
          ) -> void

          def to_hash: -> {
            token: String,
            amounts: Lithic::Models::Reports::Settlement::NetworkTotalRetrieveResponse::Amounts,
            created: Time,
            currency: String,
            institution_id: String,
            is_complete: bool,
            network: Lithic::Models::Reports::Settlement::NetworkTotalRetrieveResponse::network,
            report_date: Date,
            settlement_institution_id: String,
            settlement_service: String,
            updated: Time,
            cycle: Integer
          }

          type amounts =
            {
              gross_settlement: Integer,
              interchange_fees: Integer,
              net_settlement: Integer,
              visa_charges: Integer
            }

          class Amounts < Lithic::Internal::Type::BaseModel
            attr_accessor gross_settlement: Integer

            attr_accessor interchange_fees: Integer

            attr_accessor net_settlement: Integer

            attr_reader visa_charges: Integer?

            def visa_charges=: (Integer) -> Integer

            def initialize: (
              gross_settlement: Integer,
              interchange_fees: Integer,
              net_settlement: Integer,
              ?visa_charges: Integer
            ) -> void

            def to_hash: -> {
              gross_settlement: Integer,
              interchange_fees: Integer,
              net_settlement: Integer,
              visa_charges: Integer
            }
          end

          type network = :AMEX | :VISA | :MASTERCARD | :MAESTRO | :INTERLINK

          module Network
            extend Lithic::Internal::Type::Enum

            AMEX: :AMEX
            VISA: :VISA
            MASTERCARD: :MASTERCARD
            MAESTRO: :MAESTRO
            INTERLINK: :INTERLINK

            def self?.values: -> ::Array[Lithic::Models::Reports::Settlement::NetworkTotalRetrieveResponse::network]
          end
        end
      end
    end
  end
end
