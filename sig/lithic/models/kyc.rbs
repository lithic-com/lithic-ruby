module Lithic
  module Models
    type kyc =
      {
        individual: Lithic::KYC::Individual,
        tos_timestamp: String,
        workflow: Lithic::KYC::workflow,
        external_id: String,
        kyc_passed_timestamp: String
      }

    class KYC < Lithic::Internal::Type::BaseModel
      attr_accessor individual: Lithic::KYC::Individual

      attr_accessor tos_timestamp: String

      attr_accessor workflow: Lithic::KYC::workflow

      attr_reader external_id: String?

      def external_id=: (String) -> String

      attr_reader kyc_passed_timestamp: String?

      def kyc_passed_timestamp=: (String) -> String

      def initialize: (
        individual: Lithic::KYC::Individual,
        tos_timestamp: String,
        workflow: Lithic::KYC::workflow,
        ?external_id: String,
        ?kyc_passed_timestamp: String
      ) -> void

      type individual =
        {
          address: Lithic::Address,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          phone_number: String
        }

      class Individual < Lithic::Internal::Type::BaseModel
        attr_accessor address: Lithic::Address

        attr_accessor dob: String

        attr_accessor email: String

        attr_accessor first_name: String

        attr_accessor government_id: String

        attr_accessor last_name: String

        attr_accessor phone_number: String

        def initialize: (
          address: Lithic::Address,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          phone_number: String
        ) -> void
      end

      type workflow = :KYC_BASIC | :KYC_BYO

      module Workflow
        extend Lithic::Internal::Type::Enum

        KYC_BASIC: :KYC_BASIC
        KYC_BYO: :KYC_BYO

        def self?.values: -> ::Array[Lithic::KYC::workflow]
      end
    end
  end
end
