module Lithic
  module Models
    type kyb_business_entity =
      {
        address: Lithic::KYBBusinessEntity::Address,
        government_id: String,
        legal_business_name: String,
        phone_numbers: ::Array[String],
        dba_business_name: String,
        parent_company: String
      }

    class KYBBusinessEntity < Lithic::Internal::Type::BaseModel
      attr_accessor address: Lithic::KYBBusinessEntity::Address

      attr_accessor government_id: String

      attr_accessor legal_business_name: String

      attr_accessor phone_numbers: ::Array[String]

      attr_reader dba_business_name: String?

      def dba_business_name=: (String) -> String

      attr_reader parent_company: String?

      def parent_company=: (String) -> String

      def initialize: (
        address: Lithic::KYBBusinessEntity::Address,
        government_id: String,
        legal_business_name: String,
        phone_numbers: ::Array[String],
        ?dba_business_name: String,
        ?parent_company: String
      ) -> void

      type address =
        {
          :address1 => String,
          city: String,
          country: String,
          postal_code: String,
          state: String,
          :address2 => String
        }

      class Address < Lithic::Internal::Type::BaseModel
        attr_accessor address1: String

        attr_accessor city: String

        attr_accessor country: String

        attr_accessor postal_code: String

        attr_accessor state: String

        attr_reader address2: String?

        def address2=: (String) -> String

        def initialize: (
          address1: String,
          city: String,
          country: String,
          postal_code: String,
          state: String,
          ?address2: String
        ) -> void
      end
    end
  end
end
