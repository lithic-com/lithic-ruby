module Lithic
  module Models
    type card_spend_limits =
      {
        available_spend_limit: Lithic::CardSpendLimits::AvailableSpendLimit,
        spend_limit: Lithic::CardSpendLimits::SpendLimit,
        spend_velocity: Lithic::CardSpendLimits::SpendVelocity
      }

    class CardSpendLimits < Lithic::Internal::Type::BaseModel
      attr_accessor available_spend_limit: Lithic::CardSpendLimits::AvailableSpendLimit

      attr_reader spend_limit: Lithic::CardSpendLimits::SpendLimit?

      def spend_limit=: (
        Lithic::CardSpendLimits::SpendLimit
      ) -> Lithic::CardSpendLimits::SpendLimit

      attr_reader spend_velocity: Lithic::CardSpendLimits::SpendVelocity?

      def spend_velocity=: (
        Lithic::CardSpendLimits::SpendVelocity
      ) -> Lithic::CardSpendLimits::SpendVelocity

      def initialize: (
        available_spend_limit: Lithic::CardSpendLimits::AvailableSpendLimit,
        ?spend_limit: Lithic::CardSpendLimits::SpendLimit,
        ?spend_velocity: Lithic::CardSpendLimits::SpendVelocity
      ) -> void

      def to_hash: -> {
        available_spend_limit: Lithic::CardSpendLimits::AvailableSpendLimit,
        spend_limit: Lithic::CardSpendLimits::SpendLimit,
        spend_velocity: Lithic::CardSpendLimits::SpendVelocity
      }

      type available_spend_limit =
        { annually: Integer, forever: Integer, monthly: Integer }

      class AvailableSpendLimit < Lithic::Internal::Type::BaseModel
        attr_reader annually: Integer?

        def annually=: (Integer) -> Integer

        attr_reader forever: Integer?

        def forever=: (Integer) -> Integer

        attr_reader monthly: Integer?

        def monthly=: (Integer) -> Integer

        def initialize: (
          ?annually: Integer,
          ?forever: Integer,
          ?monthly: Integer
        ) -> void

        def to_hash: -> {
          annually: Integer,
          forever: Integer,
          monthly: Integer
        }
      end

      type spend_limit =
        { annually: Integer, forever: Integer, monthly: Integer }

      class SpendLimit < Lithic::Internal::Type::BaseModel
        attr_reader annually: Integer?

        def annually=: (Integer) -> Integer

        attr_reader forever: Integer?

        def forever=: (Integer) -> Integer

        attr_reader monthly: Integer?

        def monthly=: (Integer) -> Integer

        def initialize: (
          ?annually: Integer,
          ?forever: Integer,
          ?monthly: Integer
        ) -> void

        def to_hash: -> {
          annually: Integer,
          forever: Integer,
          monthly: Integer
        }
      end

      type spend_velocity =
        { annually: Integer, forever: Integer, monthly: Integer }

      class SpendVelocity < Lithic::Internal::Type::BaseModel
        attr_reader annually: Integer?

        def annually=: (Integer) -> Integer

        attr_reader forever: Integer?

        def forever=: (Integer) -> Integer

        attr_reader monthly: Integer?

        def monthly=: (Integer) -> Integer

        def initialize: (
          ?annually: Integer,
          ?forever: Integer,
          ?monthly: Integer
        ) -> void

        def to_hash: -> {
          annually: Integer,
          forever: Integer,
          monthly: Integer
        }
      end
    end
  end
end
