module Lithic
  module Models
    type account_holder_update_params =
      {
        beneficial_owner_entities: ::Array[Lithic::Models::AccountHolderUpdateParams::BeneficialOwnerEntity],
        beneficial_owner_individuals: ::Array[Lithic::Models::AccountHolderUpdateParams::BeneficialOwnerIndividual],
        business_entity: Lithic::Models::AccountHolderUpdateParams::BusinessEntity,
        control_person: Lithic::Models::AccountHolderUpdateParams::ControlPerson,
        external_id: String,
        nature_of_business: String,
        website_url: String,
        individual: Lithic::Models::AccountHolderUpdateParams::Individual,
        address: Lithic::Models::AddressUpdate,
        business_account_token: String,
        email: String,
        first_name: String,
        last_name: String,
        legal_business_name: String,
        phone_number: String
      }
      & Lithic::request_parameters

    class AccountHolderUpdateParams < Lithic::BaseModel
      extend Lithic::RequestParameters::Converter
      include Lithic::RequestParameters

      attr_reader beneficial_owner_entities: ::Array[Lithic::Models::AccountHolderUpdateParams::BeneficialOwnerEntity]?

      def beneficial_owner_entities=: (
        ::Array[Lithic::Models::AccountHolderUpdateParams::BeneficialOwnerEntity]
      ) -> ::Array[Lithic::Models::AccountHolderUpdateParams::BeneficialOwnerEntity]

      attr_reader beneficial_owner_individuals: ::Array[Lithic::Models::AccountHolderUpdateParams::BeneficialOwnerIndividual]?

      def beneficial_owner_individuals=: (
        ::Array[Lithic::Models::AccountHolderUpdateParams::BeneficialOwnerIndividual]
      ) -> ::Array[Lithic::Models::AccountHolderUpdateParams::BeneficialOwnerIndividual]

      attr_reader business_entity: Lithic::Models::AccountHolderUpdateParams::BusinessEntity?

      def business_entity=: (
        Lithic::Models::AccountHolderUpdateParams::BusinessEntity
      ) -> Lithic::Models::AccountHolderUpdateParams::BusinessEntity

      attr_reader control_person: Lithic::Models::AccountHolderUpdateParams::ControlPerson?

      def control_person=: (
        Lithic::Models::AccountHolderUpdateParams::ControlPerson
      ) -> Lithic::Models::AccountHolderUpdateParams::ControlPerson

      attr_reader external_id: String?

      def external_id=: (String) -> String

      attr_reader nature_of_business: String?

      def nature_of_business=: (String) -> String

      attr_reader website_url: String?

      def website_url=: (String) -> String

      attr_reader individual: Lithic::Models::AccountHolderUpdateParams::Individual?

      def individual=: (
        Lithic::Models::AccountHolderUpdateParams::Individual
      ) -> Lithic::Models::AccountHolderUpdateParams::Individual

      attr_reader address: Lithic::Models::AddressUpdate?

      def address=: (
        Lithic::Models::AddressUpdate
      ) -> Lithic::Models::AddressUpdate

      attr_reader business_account_token: String?

      def business_account_token=: (String) -> String

      attr_reader email: String?

      def email=: (String) -> String

      attr_reader first_name: String?

      def first_name=: (String) -> String

      attr_reader last_name: String?

      def last_name=: (String) -> String

      attr_reader legal_business_name: String?

      def legal_business_name=: (String) -> String

      attr_reader phone_number: String?

      def phone_number=: (String) -> String

      def initialize: (
        ?beneficial_owner_entities: ::Array[Lithic::Models::AccountHolderUpdateParams::BeneficialOwnerEntity],
        ?beneficial_owner_individuals: ::Array[Lithic::Models::AccountHolderUpdateParams::BeneficialOwnerIndividual],
        ?business_entity: Lithic::Models::AccountHolderUpdateParams::BusinessEntity,
        ?control_person: Lithic::Models::AccountHolderUpdateParams::ControlPerson,
        ?external_id: String,
        ?nature_of_business: String,
        ?website_url: String,
        ?individual: Lithic::Models::AccountHolderUpdateParams::Individual,
        ?address: Lithic::Models::AddressUpdate,
        ?business_account_token: String,
        ?email: String,
        ?first_name: String,
        ?last_name: String,
        ?legal_business_name: String,
        ?phone_number: String,
        ?request_options: Lithic::request_opts
      ) -> void

      def to_hash: -> Lithic::Models::account_holder_update_params

      type beneficial_owner_entity =
        {
          entity_token: String,
          address: Lithic::Models::AddressUpdate,
          dba_business_name: String,
          government_id: String,
          legal_business_name: String,
          parent_company: String,
          phone_numbers: ::Array[String]
        }

      class BeneficialOwnerEntity < Lithic::BaseModel
        attr_accessor entity_token: String

        attr_reader address: Lithic::Models::AddressUpdate?

        def address=: (
          Lithic::Models::AddressUpdate
        ) -> Lithic::Models::AddressUpdate

        attr_reader dba_business_name: String?

        def dba_business_name=: (String) -> String

        attr_reader government_id: String?

        def government_id=: (String) -> String

        attr_reader legal_business_name: String?

        def legal_business_name=: (String) -> String

        attr_reader parent_company: String?

        def parent_company=: (String) -> String

        attr_reader phone_numbers: ::Array[String]?

        def phone_numbers=: (::Array[String]) -> ::Array[String]

        def initialize: (
          entity_token: String,
          ?address: Lithic::Models::AddressUpdate,
          ?dba_business_name: String,
          ?government_id: String,
          ?legal_business_name: String,
          ?parent_company: String,
          ?phone_numbers: ::Array[String]
        ) -> void

        def to_hash: -> Lithic::Models::AccountHolderUpdateParams::beneficial_owner_entity
      end

      type beneficial_owner_individual =
        {
          entity_token: String,
          address: Lithic::Models::AddressUpdate,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          phone_number: String
        }

      class BeneficialOwnerIndividual < Lithic::BaseModel
        attr_accessor entity_token: String

        attr_reader address: Lithic::Models::AddressUpdate?

        def address=: (
          Lithic::Models::AddressUpdate
        ) -> Lithic::Models::AddressUpdate

        attr_reader dob: String?

        def dob=: (String) -> String

        attr_reader email: String?

        def email=: (String) -> String

        attr_reader first_name: String?

        def first_name=: (String) -> String

        attr_reader last_name: String?

        def last_name=: (String) -> String

        attr_reader phone_number: String?

        def phone_number=: (String) -> String

        attr_reader government_id: String?

        def government_id=: (String) -> String

        def initialize: (
          entity_token: String,
          ?address: Lithic::Models::AddressUpdate,
          ?dob: String,
          ?email: String,
          ?first_name: String,
          ?government_id: String,
          ?last_name: String,
          ?phone_number: String
        ) -> void

        def to_hash: -> Lithic::Models::AccountHolderUpdateParams::beneficial_owner_individual
      end

      type business_entity =
        {
          entity_token: String,
          address: Lithic::Models::AddressUpdate,
          dba_business_name: String,
          government_id: String,
          legal_business_name: String,
          parent_company: String,
          phone_numbers: ::Array[String]
        }

      class BusinessEntity < Lithic::BaseModel
        attr_accessor entity_token: String

        attr_reader address: Lithic::Models::AddressUpdate?

        def address=: (
          Lithic::Models::AddressUpdate
        ) -> Lithic::Models::AddressUpdate

        attr_reader dba_business_name: String?

        def dba_business_name=: (String) -> String

        attr_reader government_id: String?

        def government_id=: (String) -> String

        attr_reader legal_business_name: String?

        def legal_business_name=: (String) -> String

        attr_reader parent_company: String?

        def parent_company=: (String) -> String

        attr_reader phone_numbers: ::Array[String]?

        def phone_numbers=: (::Array[String]) -> ::Array[String]

        def initialize: (
          entity_token: String,
          ?address: Lithic::Models::AddressUpdate,
          ?dba_business_name: String,
          ?government_id: String,
          ?legal_business_name: String,
          ?parent_company: String,
          ?phone_numbers: ::Array[String]
        ) -> void

        def to_hash: -> Lithic::Models::AccountHolderUpdateParams::business_entity
      end

      type control_person =
        {
          entity_token: String,
          address: Lithic::Models::AddressUpdate,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          phone_number: String
        }

      class ControlPerson < Lithic::BaseModel
        attr_accessor entity_token: String

        attr_reader address: Lithic::Models::AddressUpdate?

        def address=: (
          Lithic::Models::AddressUpdate
        ) -> Lithic::Models::AddressUpdate

        attr_reader dob: String?

        def dob=: (String) -> String

        attr_reader email: String?

        def email=: (String) -> String

        attr_reader first_name: String?

        def first_name=: (String) -> String

        attr_reader last_name: String?

        def last_name=: (String) -> String

        attr_reader phone_number: String?

        def phone_number=: (String) -> String

        attr_reader government_id: String?

        def government_id=: (String) -> String

        def initialize: (
          entity_token: String,
          ?address: Lithic::Models::AddressUpdate,
          ?dob: String,
          ?email: String,
          ?first_name: String,
          ?government_id: String,
          ?last_name: String,
          ?phone_number: String
        ) -> void

        def to_hash: -> Lithic::Models::AccountHolderUpdateParams::control_person
      end

      type individual =
        {
          entity_token: String,
          address: Lithic::Models::AddressUpdate,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          phone_number: String
        }

      class Individual < Lithic::BaseModel
        attr_accessor entity_token: String

        attr_reader address: Lithic::Models::AddressUpdate?

        def address=: (
          Lithic::Models::AddressUpdate
        ) -> Lithic::Models::AddressUpdate

        attr_reader dob: String?

        def dob=: (String) -> String

        attr_reader email: String?

        def email=: (String) -> String

        attr_reader first_name: String?

        def first_name=: (String) -> String

        attr_reader last_name: String?

        def last_name=: (String) -> String

        attr_reader phone_number: String?

        def phone_number=: (String) -> String

        attr_reader government_id: String?

        def government_id=: (String) -> String

        def initialize: (
          entity_token: String,
          ?address: Lithic::Models::AddressUpdate,
          ?dob: String,
          ?email: String,
          ?first_name: String,
          ?government_id: String,
          ?last_name: String,
          ?phone_number: String
        ) -> void

        def to_hash: -> Lithic::Models::AccountHolderUpdateParams::individual
      end
    end
  end
end
