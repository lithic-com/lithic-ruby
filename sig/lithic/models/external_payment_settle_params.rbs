module Lithic
  module Models
    type external_payment_settle_params =
      {
        effective_date: Date,
        memo: String,
        progress_to: Lithic::Models::ExternalPaymentSettleParams::progress_to
      }
      & Lithic::Internal::Type::request_parameters

    class ExternalPaymentSettleParams < Lithic::Internal::Type::BaseModel
      extend Lithic::Internal::Type::RequestParameters::Converter
      include Lithic::Internal::Type::RequestParameters

      attr_accessor effective_date: Date

      attr_reader memo: String?

      def memo=: (String) -> String

      attr_reader progress_to: Lithic::Models::ExternalPaymentSettleParams::progress_to?

      def progress_to=: (
        Lithic::Models::ExternalPaymentSettleParams::progress_to
      ) -> Lithic::Models::ExternalPaymentSettleParams::progress_to

      def initialize: (
        effective_date: Date,
        ?memo: String,
        ?progress_to: Lithic::Models::ExternalPaymentSettleParams::progress_to,
        ?request_options: Lithic::request_opts
      ) -> void

      type progress_to = :SETTLED | :RELEASED

      module ProgressTo
        extend Lithic::Internal::Type::Enum

        SETTLED: :SETTLED
        RELEASED: :RELEASED

        def self?.values: -> ::Array[Lithic::Models::ExternalPaymentSettleParams::progress_to]
      end
    end
  end
end
