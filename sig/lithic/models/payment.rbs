module Lithic
  module Models
    type payment =
      {
        token: String,
        category: Lithic::Payment::category,
        created: Time,
        currency: String,
        descriptor: String,
        direction: Lithic::Payment::direction,
        events: ::Array[Lithic::Payment::Event],
        external_bank_account_token: String?,
        financial_account_token: String,
        method_: Lithic::Payment::method_,
        method_attributes: Lithic::Payment::MethodAttributes,
        pending_amount: Integer,
        result: Lithic::Payment::result,
        settled_amount: Integer,
        source: Lithic::Payment::source,
        status: Lithic::Payment::status,
        updated: Time,
        user_defined_id: String?,
        expected_release_date: Date
      }

    class Payment < Lithic::Internal::Type::BaseModel
      attr_accessor token: String

      attr_accessor category: Lithic::Payment::category

      attr_accessor created: Time

      attr_accessor currency: String

      attr_accessor descriptor: String

      attr_accessor direction: Lithic::Payment::direction

      attr_accessor events: ::Array[Lithic::Payment::Event]

      attr_accessor external_bank_account_token: String?

      attr_accessor financial_account_token: String

      attr_accessor method_: Lithic::Payment::method_

      attr_accessor method_attributes: Lithic::Payment::MethodAttributes

      attr_accessor pending_amount: Integer

      attr_accessor result: Lithic::Payment::result

      attr_accessor settled_amount: Integer

      attr_accessor source: Lithic::Payment::source

      attr_accessor status: Lithic::Payment::status

      attr_accessor updated: Time

      attr_accessor user_defined_id: String?

      attr_reader expected_release_date: Date?

      def expected_release_date=: (Date) -> Date

      def initialize: (
        token: String,
        category: Lithic::Payment::category,
        created: Time,
        currency: String,
        descriptor: String,
        direction: Lithic::Payment::direction,
        events: ::Array[Lithic::Payment::Event],
        external_bank_account_token: String?,
        financial_account_token: String,
        method_: Lithic::Payment::method_,
        method_attributes: Lithic::Payment::MethodAttributes,
        pending_amount: Integer,
        result: Lithic::Payment::result,
        settled_amount: Integer,
        source: Lithic::Payment::source,
        status: Lithic::Payment::status,
        updated: Time,
        user_defined_id: String?,
        ?expected_release_date: Date
      ) -> void

      type category = :ACH

      module Category
        extend Lithic::Internal::Type::Enum

        ACH: :ACH

        def self?.values: -> ::Array[Lithic::Payment::category]
      end

      type direction = :CREDIT | :DEBIT

      module Direction
        extend Lithic::Internal::Type::Enum

        CREDIT: :CREDIT
        DEBIT: :DEBIT

        def self?.values: -> ::Array[Lithic::Payment::direction]
      end

      type event =
        {
          token: String,
          amount: Integer,
          created: Time,
          result: Lithic::Payment::Event::result,
          type: Lithic::Payment::Event::type_,
          detailed_results: ::Array[Lithic::Payment::Event::detailed_result]
        }

      class Event < Lithic::Internal::Type::BaseModel
        attr_accessor token: String

        attr_accessor amount: Integer

        attr_accessor created: Time

        attr_accessor result: Lithic::Payment::Event::result

        attr_accessor type: Lithic::Payment::Event::type_

        attr_reader detailed_results: ::Array[Lithic::Payment::Event::detailed_result]?

        def detailed_results=: (
          ::Array[Lithic::Payment::Event::detailed_result]
        ) -> ::Array[Lithic::Payment::Event::detailed_result]

        def initialize: (
          token: String,
          amount: Integer,
          created: Time,
          result: Lithic::Payment::Event::result,
          type: Lithic::Payment::Event::type_,
          ?detailed_results: ::Array[Lithic::Payment::Event::detailed_result]
        ) -> void

        type result = :APPROVED | :DECLINED

        module Result
          extend Lithic::Internal::Type::Enum

          APPROVED: :APPROVED
          DECLINED: :DECLINED

          def self?.values: -> ::Array[Lithic::Payment::Event::result]
        end

        type type_ =
          :ACH_ORIGINATION_CANCELLED
          | :ACH_ORIGINATION_INITIATED
          | :ACH_ORIGINATION_PROCESSED
          | :ACH_ORIGINATION_SETTLED
          | :ACH_ORIGINATION_RELEASED
          | :ACH_ORIGINATION_REVIEWED
          | :ACH_RECEIPT_PROCESSED
          | :ACH_RECEIPT_SETTLED
          | :ACH_RETURN_INITIATED
          | :ACH_RETURN_PROCESSED
          | :ACH_RETURN_SETTLED

        module Type
          extend Lithic::Internal::Type::Enum

          ACH_ORIGINATION_CANCELLED: :ACH_ORIGINATION_CANCELLED
          ACH_ORIGINATION_INITIATED: :ACH_ORIGINATION_INITIATED
          ACH_ORIGINATION_PROCESSED: :ACH_ORIGINATION_PROCESSED
          ACH_ORIGINATION_SETTLED: :ACH_ORIGINATION_SETTLED
          ACH_ORIGINATION_RELEASED: :ACH_ORIGINATION_RELEASED
          ACH_ORIGINATION_REVIEWED: :ACH_ORIGINATION_REVIEWED
          ACH_RECEIPT_PROCESSED: :ACH_RECEIPT_PROCESSED
          ACH_RECEIPT_SETTLED: :ACH_RECEIPT_SETTLED
          ACH_RETURN_INITIATED: :ACH_RETURN_INITIATED
          ACH_RETURN_PROCESSED: :ACH_RETURN_PROCESSED
          ACH_RETURN_SETTLED: :ACH_RETURN_SETTLED

          def self?.values: -> ::Array[Lithic::Payment::Event::type_]
        end

        type detailed_result =
          :APPROVED
          | :FUNDS_INSUFFICIENT
          | :ACCOUNT_INVALID
          | :PROGRAM_TRANSACTION_LIMIT_EXCEEDED
          | :PROGRAM_DAILY_LIMIT_EXCEEDED
          | :PROGRAM_MONTHLY_LIMIT_EXCEEDED

        module DetailedResult
          extend Lithic::Internal::Type::Enum

          APPROVED: :APPROVED
          FUNDS_INSUFFICIENT: :FUNDS_INSUFFICIENT
          ACCOUNT_INVALID: :ACCOUNT_INVALID
          PROGRAM_TRANSACTION_LIMIT_EXCEEDED: :PROGRAM_TRANSACTION_LIMIT_EXCEEDED
          PROGRAM_DAILY_LIMIT_EXCEEDED: :PROGRAM_DAILY_LIMIT_EXCEEDED
          PROGRAM_MONTHLY_LIMIT_EXCEEDED: :PROGRAM_MONTHLY_LIMIT_EXCEEDED

          def self?.values: -> ::Array[Lithic::Payment::Event::detailed_result]
        end
      end

      type method_ = :ACH_NEXT_DAY | :ACH_SAME_DAY

      module Method
        extend Lithic::Internal::Type::Enum

        ACH_NEXT_DAY: :ACH_NEXT_DAY
        ACH_SAME_DAY: :ACH_SAME_DAY

        def self?.values: -> ::Array[Lithic::Payment::method_]
      end

      type method_attributes =
        {
          company_id: String?,
          receipt_routing_number: String?,
          retries: Integer?,
          return_reason_code: String?,
          sec_code: Lithic::Payment::MethodAttributes::sec_code,
          trace_numbers: ::Array[String?]
        }

      class MethodAttributes < Lithic::Internal::Type::BaseModel
        attr_accessor company_id: String?

        attr_accessor receipt_routing_number: String?

        attr_accessor retries: Integer?

        attr_accessor return_reason_code: String?

        attr_accessor sec_code: Lithic::Payment::MethodAttributes::sec_code

        attr_accessor trace_numbers: ::Array[String?]

        def initialize: (
          company_id: String?,
          receipt_routing_number: String?,
          retries: Integer?,
          return_reason_code: String?,
          sec_code: Lithic::Payment::MethodAttributes::sec_code,
          trace_numbers: ::Array[String?]
        ) -> void

        type sec_code = :CCD | :PPD | :WEB

        module SecCode
          extend Lithic::Internal::Type::Enum

          CCD: :CCD
          PPD: :PPD
          WEB: :WEB

          def self?.values: -> ::Array[Lithic::Payment::MethodAttributes::sec_code]
        end
      end

      type result = :APPROVED | :DECLINED

      module Result
        extend Lithic::Internal::Type::Enum

        APPROVED: :APPROVED
        DECLINED: :DECLINED

        def self?.values: -> ::Array[Lithic::Payment::result]
      end

      type source = :CUSTOMER | :LITHIC

      module Source
        extend Lithic::Internal::Type::Enum

        CUSTOMER: :CUSTOMER
        LITHIC: :LITHIC

        def self?.values: -> ::Array[Lithic::Payment::source]
      end

      type status = :DECLINED | :PENDING | :RETURNED | :SETTLED

      module Status
        extend Lithic::Internal::Type::Enum

        DECLINED: :DECLINED
        PENDING: :PENDING
        RETURNED: :RETURNED
        SETTLED: :SETTLED

        def self?.values: -> ::Array[Lithic::Payment::status]
      end
    end
  end
end
