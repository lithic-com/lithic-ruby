module Lithic
  module Models
    type account_holder_simulate_enrollment_review_response =
      {
        token: String,
        account_token: String,
        beneficial_owner_entities: ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerEntity],
        beneficial_owner_individuals: ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerIndividual],
        business_account_token: String,
        business_entity: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BusinessEntity,
        control_person: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::ControlPerson,
        created: Time,
        email: String,
        exemption_type: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::exemption_type,
        external_id: String,
        individual: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::Individual,
        nature_of_business: String,
        phone_number: String,
        required_documents: ::Array[Lithic::Models::RequiredDocument],
        status: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::status,
        status_reasons: ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::status_reason],
        user_type: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::user_type,
        verification_application: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication,
        website_url: String
      }

    class AccountHolderSimulateEnrollmentReviewResponse < Lithic::BaseModel
      attr_reader token: String?

      def token=: (String) -> String

      attr_reader account_token: String?

      def account_token=: (String) -> String

      attr_reader beneficial_owner_entities: ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerEntity]?

      def beneficial_owner_entities=: (
        ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerEntity]
      ) -> ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerEntity]

      attr_reader beneficial_owner_individuals: ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerIndividual]?

      def beneficial_owner_individuals=: (
        ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerIndividual]
      ) -> ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerIndividual]

      attr_reader business_account_token: String?

      def business_account_token=: (String) -> String

      attr_reader business_entity: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BusinessEntity?

      def business_entity=: (
        Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BusinessEntity
      ) -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BusinessEntity

      attr_reader control_person: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::ControlPerson?

      def control_person=: (
        Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::ControlPerson
      ) -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::ControlPerson

      attr_reader created: Time?

      def created=: (Time) -> Time

      attr_reader email: String?

      def email=: (String) -> String

      attr_reader exemption_type: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::exemption_type?

      def exemption_type=: (
        Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::exemption_type
      ) -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::exemption_type

      attr_reader external_id: String?

      def external_id=: (String) -> String

      attr_reader individual: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::Individual?

      def individual=: (
        Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::Individual
      ) -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::Individual

      attr_reader nature_of_business: String?

      def nature_of_business=: (String) -> String

      attr_reader phone_number: String?

      def phone_number=: (String) -> String

      attr_reader required_documents: ::Array[Lithic::Models::RequiredDocument]?

      def required_documents=: (
        ::Array[Lithic::Models::RequiredDocument]
      ) -> ::Array[Lithic::Models::RequiredDocument]

      attr_reader status: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::status?

      def status=: (
        Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::status
      ) -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::status

      attr_reader status_reasons: ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::status_reason]?

      def status_reasons=: (
        ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::status_reason]
      ) -> ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::status_reason]

      attr_reader user_type: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::user_type?

      def user_type=: (
        Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::user_type
      ) -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::user_type

      attr_reader verification_application: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication?

      def verification_application=: (
        Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication
      ) -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication

      attr_reader website_url: String?

      def website_url=: (String) -> String

      def initialize: (
        ?token: String,
        ?account_token: String,
        ?beneficial_owner_entities: ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerEntity],
        ?beneficial_owner_individuals: ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerIndividual],
        ?business_account_token: String,
        ?business_entity: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BusinessEntity,
        ?control_person: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::ControlPerson,
        ?created: Time,
        ?email: String,
        ?exemption_type: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::exemption_type,
        ?external_id: String,
        ?individual: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::Individual,
        ?nature_of_business: String,
        ?phone_number: String,
        ?required_documents: ::Array[Lithic::Models::RequiredDocument],
        ?status: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::status,
        ?status_reasons: ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::status_reason],
        ?user_type: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::user_type,
        ?verification_application: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication,
        ?website_url: String
      ) -> void

      def to_hash: -> Lithic::Models::account_holder_simulate_enrollment_review_response

      type beneficial_owner_entity =
        {
          address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerEntity::Address,
          government_id: String,
          legal_business_name: String,
          phone_numbers: ::Array[String],
          dba_business_name: String,
          parent_company: String
        }

      class BeneficialOwnerEntity < Lithic::BaseModel
        attr_accessor address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerEntity::Address

        attr_accessor government_id: String

        attr_accessor legal_business_name: String

        attr_accessor phone_numbers: ::Array[String]

        attr_reader dba_business_name: String?

        def dba_business_name=: (String) -> String

        attr_reader parent_company: String?

        def parent_company=: (String) -> String

        def initialize: (
          address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerEntity::Address,
          government_id: String,
          legal_business_name: String,
          phone_numbers: ::Array[String],
          ?dba_business_name: String,
          ?parent_company: String
        ) -> void

        def to_hash: -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::beneficial_owner_entity

        type address =
          {
            :address1 => String,
            city: String,
            country: String,
            postal_code: String,
            state: String,
            :address2 => String
          }

        class Address < Lithic::BaseModel
          attr_accessor address1: String

          attr_accessor city: String

          attr_accessor country: String

          attr_accessor postal_code: String

          attr_accessor state: String

          attr_reader address2: String?

          def address2=: (String) -> String

          def initialize: (
            address1: String,
            city: String,
            country: String,
            postal_code: String,
            state: String,
            ?address2: String
          ) -> void

          def to_hash: -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerEntity::address
        end
      end

      type beneficial_owner_individual =
        {
          address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerIndividual::Address,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          phone_number: String
        }

      class BeneficialOwnerIndividual < Lithic::BaseModel
        attr_reader address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerIndividual::Address?

        def address=: (
          Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerIndividual::Address
        ) -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerIndividual::Address

        attr_reader dob: String?

        def dob=: (String) -> String

        attr_reader email: String?

        def email=: (String) -> String

        attr_reader first_name: String?

        def first_name=: (String) -> String

        attr_reader last_name: String?

        def last_name=: (String) -> String

        attr_reader phone_number: String?

        def phone_number=: (String) -> String

        def initialize: (
          ?address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerIndividual::Address,
          ?dob: String,
          ?email: String,
          ?first_name: String,
          ?last_name: String,
          ?phone_number: String
        ) -> void

        def to_hash: -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::beneficial_owner_individual

        type address =
          {
            :address1 => String,
            city: String,
            country: String,
            postal_code: String,
            state: String,
            :address2 => String
          }

        class Address < Lithic::BaseModel
          attr_accessor address1: String

          attr_accessor city: String

          attr_accessor country: String

          attr_accessor postal_code: String

          attr_accessor state: String

          attr_reader address2: String?

          def address2=: (String) -> String

          def initialize: (
            address1: String,
            city: String,
            country: String,
            postal_code: String,
            state: String,
            ?address2: String
          ) -> void

          def to_hash: -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BeneficialOwnerIndividual::address
        end
      end

      type business_entity =
        {
          address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BusinessEntity::Address,
          government_id: String,
          legal_business_name: String,
          phone_numbers: ::Array[String],
          dba_business_name: String,
          parent_company: String
        }

      class BusinessEntity < Lithic::BaseModel
        attr_accessor address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BusinessEntity::Address

        attr_accessor government_id: String

        attr_accessor legal_business_name: String

        attr_accessor phone_numbers: ::Array[String]

        attr_reader dba_business_name: String?

        def dba_business_name=: (String) -> String

        attr_reader parent_company: String?

        def parent_company=: (String) -> String

        def initialize: (
          address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BusinessEntity::Address,
          government_id: String,
          legal_business_name: String,
          phone_numbers: ::Array[String],
          ?dba_business_name: String,
          ?parent_company: String
        ) -> void

        def to_hash: -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::business_entity

        type address =
          {
            :address1 => String,
            city: String,
            country: String,
            postal_code: String,
            state: String,
            :address2 => String
          }

        class Address < Lithic::BaseModel
          attr_accessor address1: String

          attr_accessor city: String

          attr_accessor country: String

          attr_accessor postal_code: String

          attr_accessor state: String

          attr_reader address2: String?

          def address2=: (String) -> String

          def initialize: (
            address1: String,
            city: String,
            country: String,
            postal_code: String,
            state: String,
            ?address2: String
          ) -> void

          def to_hash: -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::BusinessEntity::address
        end
      end

      type control_person =
        {
          address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::ControlPerson::Address,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          phone_number: String
        }

      class ControlPerson < Lithic::BaseModel
        attr_reader address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::ControlPerson::Address?

        def address=: (
          Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::ControlPerson::Address
        ) -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::ControlPerson::Address

        attr_reader dob: String?

        def dob=: (String) -> String

        attr_reader email: String?

        def email=: (String) -> String

        attr_reader first_name: String?

        def first_name=: (String) -> String

        attr_reader last_name: String?

        def last_name=: (String) -> String

        attr_reader phone_number: String?

        def phone_number=: (String) -> String

        def initialize: (
          ?address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::ControlPerson::Address,
          ?dob: String,
          ?email: String,
          ?first_name: String,
          ?last_name: String,
          ?phone_number: String
        ) -> void

        def to_hash: -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::control_person

        type address =
          {
            :address1 => String,
            city: String,
            country: String,
            postal_code: String,
            state: String,
            :address2 => String
          }

        class Address < Lithic::BaseModel
          attr_accessor address1: String

          attr_accessor city: String

          attr_accessor country: String

          attr_accessor postal_code: String

          attr_accessor state: String

          attr_reader address2: String?

          def address2=: (String) -> String

          def initialize: (
            address1: String,
            city: String,
            country: String,
            postal_code: String,
            state: String,
            ?address2: String
          ) -> void

          def to_hash: -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::ControlPerson::address
        end
      end

      type exemption_type = :AUTHORIZED_USER | :PREPAID_CARD_USER

      module ExemptionType
        extend Lithic::Enum

        AUTHORIZED_USER: :AUTHORIZED_USER
        PREPAID_CARD_USER: :PREPAID_CARD_USER

        def self?.values: -> ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::exemption_type]
      end

      type individual =
        {
          address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::Individual::Address,
          dob: String,
          email: String,
          first_name: String,
          government_id: String,
          last_name: String,
          phone_number: String
        }

      class Individual < Lithic::BaseModel
        attr_reader address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::Individual::Address?

        def address=: (
          Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::Individual::Address
        ) -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::Individual::Address

        attr_reader dob: String?

        def dob=: (String) -> String

        attr_reader email: String?

        def email=: (String) -> String

        attr_reader first_name: String?

        def first_name=: (String) -> String

        attr_reader last_name: String?

        def last_name=: (String) -> String

        attr_reader phone_number: String?

        def phone_number=: (String) -> String

        def initialize: (
          ?address: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::Individual::Address,
          ?dob: String,
          ?email: String,
          ?first_name: String,
          ?last_name: String,
          ?phone_number: String
        ) -> void

        def to_hash: -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::individual

        type address =
          {
            :address1 => String,
            city: String,
            country: String,
            postal_code: String,
            state: String,
            :address2 => String
          }

        class Address < Lithic::BaseModel
          attr_accessor address1: String

          attr_accessor city: String

          attr_accessor country: String

          attr_accessor postal_code: String

          attr_accessor state: String

          attr_reader address2: String?

          def address2=: (String) -> String

          def initialize: (
            address1: String,
            city: String,
            country: String,
            postal_code: String,
            state: String,
            ?address2: String
          ) -> void

          def to_hash: -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::Individual::address
        end
      end

      type status =
        :ACCEPTED | :PENDING_DOCUMENT | :PENDING_RESUBMIT | :REJECTED

      module Status
        extend Lithic::Enum

        ACCEPTED: :ACCEPTED
        PENDING_DOCUMENT: :PENDING_DOCUMENT
        PENDING_RESUBMIT: :PENDING_RESUBMIT
        REJECTED: :REJECTED

        def self?.values: -> ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::status]
      end

      type status_reason =
        :ADDRESS_VERIFICATION_FAILURE
        | :AGE_THRESHOLD_FAILURE
        | :COMPLETE_VERIFICATION_FAILURE
        | :DOB_VERIFICATION_FAILURE
        | :ID_VERIFICATION_FAILURE
        | :MAX_DOCUMENT_ATTEMPTS
        | :MAX_RESUBMISSION_ATTEMPTS
        | :NAME_VERIFICATION_FAILURE
        | :OTHER_VERIFICATION_FAILURE
        | :RISK_THRESHOLD_FAILURE
        | :WATCHLIST_ALERT_FAILURE
        | :PRIMARY_BUSINESS_ENTITY_ID_VERIFICATION_FAILURE
        | :PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
        | :PRIMARY_BUSINESS_ENTITY_NAME_VERIFICATION_FAILURE
        | :PRIMARY_BUSINESS_ENTITY_BUSINESS_OFFICERS_NOT_MATCHED
        | :PRIMARY_BUSINESS_ENTITY_SOS_FILING_INACTIVE
        | :PRIMARY_BUSINESS_ENTITY_SOS_NOT_MATCHED
        | :PRIMARY_BUSINESS_ENTITY_CMRA_FAILURE
        | :PRIMARY_BUSINESS_ENTITY_WATCHLIST_FAILURE
        | :PRIMARY_BUSINESS_ENTITY_REGISTERED_AGENT_FAILURE
        | :CONTROL_PERSON_BLOCKLIST_ALERT_FAILURE
        | :CONTROL_PERSON_ID_VERIFICATION_FAILURE
        | :CONTROL_PERSON_DOB_VERIFICATION_FAILURE
        | :CONTROL_PERSON_NAME_VERIFICATION_FAILURE

      module StatusReason
        extend Lithic::Enum

        ADDRESS_VERIFICATION_FAILURE: :ADDRESS_VERIFICATION_FAILURE
        AGE_THRESHOLD_FAILURE: :AGE_THRESHOLD_FAILURE
        COMPLETE_VERIFICATION_FAILURE: :COMPLETE_VERIFICATION_FAILURE
        DOB_VERIFICATION_FAILURE: :DOB_VERIFICATION_FAILURE
        ID_VERIFICATION_FAILURE: :ID_VERIFICATION_FAILURE
        MAX_DOCUMENT_ATTEMPTS: :MAX_DOCUMENT_ATTEMPTS
        MAX_RESUBMISSION_ATTEMPTS: :MAX_RESUBMISSION_ATTEMPTS
        NAME_VERIFICATION_FAILURE: :NAME_VERIFICATION_FAILURE
        OTHER_VERIFICATION_FAILURE: :OTHER_VERIFICATION_FAILURE
        RISK_THRESHOLD_FAILURE: :RISK_THRESHOLD_FAILURE
        WATCHLIST_ALERT_FAILURE: :WATCHLIST_ALERT_FAILURE
        PRIMARY_BUSINESS_ENTITY_ID_VERIFICATION_FAILURE: :PRIMARY_BUSINESS_ENTITY_ID_VERIFICATION_FAILURE
        PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE: :PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
        PRIMARY_BUSINESS_ENTITY_NAME_VERIFICATION_FAILURE: :PRIMARY_BUSINESS_ENTITY_NAME_VERIFICATION_FAILURE
        PRIMARY_BUSINESS_ENTITY_BUSINESS_OFFICERS_NOT_MATCHED: :PRIMARY_BUSINESS_ENTITY_BUSINESS_OFFICERS_NOT_MATCHED
        PRIMARY_BUSINESS_ENTITY_SOS_FILING_INACTIVE: :PRIMARY_BUSINESS_ENTITY_SOS_FILING_INACTIVE
        PRIMARY_BUSINESS_ENTITY_SOS_NOT_MATCHED: :PRIMARY_BUSINESS_ENTITY_SOS_NOT_MATCHED
        PRIMARY_BUSINESS_ENTITY_CMRA_FAILURE: :PRIMARY_BUSINESS_ENTITY_CMRA_FAILURE
        PRIMARY_BUSINESS_ENTITY_WATCHLIST_FAILURE: :PRIMARY_BUSINESS_ENTITY_WATCHLIST_FAILURE
        PRIMARY_BUSINESS_ENTITY_REGISTERED_AGENT_FAILURE: :PRIMARY_BUSINESS_ENTITY_REGISTERED_AGENT_FAILURE
        CONTROL_PERSON_BLOCKLIST_ALERT_FAILURE: :CONTROL_PERSON_BLOCKLIST_ALERT_FAILURE
        CONTROL_PERSON_ID_VERIFICATION_FAILURE: :CONTROL_PERSON_ID_VERIFICATION_FAILURE
        CONTROL_PERSON_DOB_VERIFICATION_FAILURE: :CONTROL_PERSON_DOB_VERIFICATION_FAILURE
        CONTROL_PERSON_NAME_VERIFICATION_FAILURE: :CONTROL_PERSON_NAME_VERIFICATION_FAILURE

        def self?.values: -> ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::status_reason]
      end

      type user_type = :BUSINESS | :INDIVIDUAL

      module UserType
        extend Lithic::Enum

        BUSINESS: :BUSINESS
        INDIVIDUAL: :INDIVIDUAL

        def self?.values: -> ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::user_type]
      end

      type verification_application =
        {
          created: Time,
          status: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication::status,
          status_reasons: ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication::status_reason],
          updated: Time
        }

      class VerificationApplication < Lithic::BaseModel
        attr_accessor created: Time

        attr_accessor status: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication::status

        attr_accessor status_reasons: ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication::status_reason]

        attr_accessor updated: Time

        def initialize: (
          created: Time,
          status: Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication::status,
          status_reasons: ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication::status_reason],
          updated: Time
        ) -> void

        def to_hash: -> Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::verification_application

        type status =
          :ACCEPTED | :PENDING_DOCUMENT | :PENDING_RESUBMIT | :REJECTED

        module Status
          extend Lithic::Enum

          ACCEPTED: :ACCEPTED
          PENDING_DOCUMENT: :PENDING_DOCUMENT
          PENDING_RESUBMIT: :PENDING_RESUBMIT
          REJECTED: :REJECTED

          def self?.values: -> ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication::status]
        end

        type status_reason =
          :ADDRESS_VERIFICATION_FAILURE
          | :AGE_THRESHOLD_FAILURE
          | :COMPLETE_VERIFICATION_FAILURE
          | :DOB_VERIFICATION_FAILURE
          | :ID_VERIFICATION_FAILURE
          | :MAX_DOCUMENT_ATTEMPTS
          | :MAX_RESUBMISSION_ATTEMPTS
          | :NAME_VERIFICATION_FAILURE
          | :OTHER_VERIFICATION_FAILURE
          | :RISK_THRESHOLD_FAILURE
          | :WATCHLIST_ALERT_FAILURE
          | :PRIMARY_BUSINESS_ENTITY_ID_VERIFICATION_FAILURE
          | :PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
          | :PRIMARY_BUSINESS_ENTITY_NAME_VERIFICATION_FAILURE
          | :PRIMARY_BUSINESS_ENTITY_BUSINESS_OFFICERS_NOT_MATCHED
          | :PRIMARY_BUSINESS_ENTITY_SOS_FILING_INACTIVE
          | :PRIMARY_BUSINESS_ENTITY_SOS_NOT_MATCHED
          | :PRIMARY_BUSINESS_ENTITY_CMRA_FAILURE
          | :PRIMARY_BUSINESS_ENTITY_WATCHLIST_FAILURE
          | :PRIMARY_BUSINESS_ENTITY_REGISTERED_AGENT_FAILURE
          | :CONTROL_PERSON_BLOCKLIST_ALERT_FAILURE
          | :CONTROL_PERSON_ID_VERIFICATION_FAILURE
          | :CONTROL_PERSON_DOB_VERIFICATION_FAILURE
          | :CONTROL_PERSON_NAME_VERIFICATION_FAILURE

        module StatusReason
          extend Lithic::Enum

          ADDRESS_VERIFICATION_FAILURE: :ADDRESS_VERIFICATION_FAILURE
          AGE_THRESHOLD_FAILURE: :AGE_THRESHOLD_FAILURE
          COMPLETE_VERIFICATION_FAILURE: :COMPLETE_VERIFICATION_FAILURE
          DOB_VERIFICATION_FAILURE: :DOB_VERIFICATION_FAILURE
          ID_VERIFICATION_FAILURE: :ID_VERIFICATION_FAILURE
          MAX_DOCUMENT_ATTEMPTS: :MAX_DOCUMENT_ATTEMPTS
          MAX_RESUBMISSION_ATTEMPTS: :MAX_RESUBMISSION_ATTEMPTS
          NAME_VERIFICATION_FAILURE: :NAME_VERIFICATION_FAILURE
          OTHER_VERIFICATION_FAILURE: :OTHER_VERIFICATION_FAILURE
          RISK_THRESHOLD_FAILURE: :RISK_THRESHOLD_FAILURE
          WATCHLIST_ALERT_FAILURE: :WATCHLIST_ALERT_FAILURE
          PRIMARY_BUSINESS_ENTITY_ID_VERIFICATION_FAILURE: :PRIMARY_BUSINESS_ENTITY_ID_VERIFICATION_FAILURE
          PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE: :PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
          PRIMARY_BUSINESS_ENTITY_NAME_VERIFICATION_FAILURE: :PRIMARY_BUSINESS_ENTITY_NAME_VERIFICATION_FAILURE
          PRIMARY_BUSINESS_ENTITY_BUSINESS_OFFICERS_NOT_MATCHED: :PRIMARY_BUSINESS_ENTITY_BUSINESS_OFFICERS_NOT_MATCHED
          PRIMARY_BUSINESS_ENTITY_SOS_FILING_INACTIVE: :PRIMARY_BUSINESS_ENTITY_SOS_FILING_INACTIVE
          PRIMARY_BUSINESS_ENTITY_SOS_NOT_MATCHED: :PRIMARY_BUSINESS_ENTITY_SOS_NOT_MATCHED
          PRIMARY_BUSINESS_ENTITY_CMRA_FAILURE: :PRIMARY_BUSINESS_ENTITY_CMRA_FAILURE
          PRIMARY_BUSINESS_ENTITY_WATCHLIST_FAILURE: :PRIMARY_BUSINESS_ENTITY_WATCHLIST_FAILURE
          PRIMARY_BUSINESS_ENTITY_REGISTERED_AGENT_FAILURE: :PRIMARY_BUSINESS_ENTITY_REGISTERED_AGENT_FAILURE
          CONTROL_PERSON_BLOCKLIST_ALERT_FAILURE: :CONTROL_PERSON_BLOCKLIST_ALERT_FAILURE
          CONTROL_PERSON_ID_VERIFICATION_FAILURE: :CONTROL_PERSON_ID_VERIFICATION_FAILURE
          CONTROL_PERSON_DOB_VERIFICATION_FAILURE: :CONTROL_PERSON_DOB_VERIFICATION_FAILURE
          CONTROL_PERSON_NAME_VERIFICATION_FAILURE: :CONTROL_PERSON_NAME_VERIFICATION_FAILURE

          def self?.values: -> ::Array[Lithic::Models::AccountHolderSimulateEnrollmentReviewResponse::VerificationApplication::status_reason]
        end
      end
    end
  end
end
